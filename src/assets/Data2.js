const rest = {
  lec3: [
    {
      title: "العمليات الحسابية في بايثون",
      subtitle: "إزاي نستخدم الأرقام ونحسب بيها",
      explanation:
        "\nالعمليات الحسابية (Arithmetic Operators) بتسمحلك تنفذ حسابات زي الجمع والطرح والضرب.\nفي بايثون، تقدر تستخدم الرموز دي مع الأرقام:\n\n+  : الجمع\n-  : الطرح\n*  : الضرب\n/  : القسمة\n// : القسمة بدون باقي (عدد صحيح)\n%  : باقي القسمة (modulus)\n** : القوة (أس)\n",
      code: "\na = 10\nb = 3\n\nprint(a + b)   # جمع => 13\nprint(a - b)   # طرح => 7\nprint(a * b)   # ضرب => 30\nprint(a / b)   # قسمة عادية => 3.333...\nprint(a // b)  # قسمة بدون كسور => 3\nprint(a % b)   # باقي القسمة => 1\nprint(a ** b)  # 10 أس 3 => 1000\n",
      output: "\n13\n7\n30\n3.3333333333333335\n3\n1\n1000\n",
      notes:
        "\n- القسمة `/` دايمًا بتدي ناتج عشري (float).\n- `%` بتستخدم كتير في معرفة الأرقام الفردية والزوجية.\nمثال: `if x % 2 == 0` يبقى x زوجي.\n",
      question: {
        type: "multiple",
        text: "ما نتيجة 2 ** 3 في بايثون؟",
        options: ["6", "8", "9", "5"],
        correct: "8",
        explanation: "لأن 2 ** 3 معناها 2 مرفوع للقوة 3 = 2 × 2 × 2 = 8.",
      },
    },
    {
      title: "عمليات الإسناد",
      subtitle: "إزاي ندي قيمة لمتغير ونتحكم فيها",
      explanation:
        "\nعمليات الإسناد (Assignment Operators) بتُستخدم عشان تخزن قيمة في متغير، أو تعدل عليه.\nأشهرهم هو `=`، بس في كمان طرق مختصرة لعمليات تانية.\n",
      code: "\nx = 10     # إسناد عادي\nx += 5     # نفس x = x + 5 => x = 15\nx -= 3     # نفس x = x - 3 => x = 12\nx *= 2     # نفس x = x * 2 => x = 24\nx /= 4     # نفس x = x / 4 => x = 6.0\n",
      output: "\n6.0\n",
      notes:
        "\n- العلامات المركبة (+=، -=، ...) بتخلي الكود أبسط وأسهل.\n- الناتج من القسمة `/=` بيكون دايمًا عشري (float).\n",
      question: {
        type: "multiple",
        text: "ما قيمة x بعد تنفيذ الكود التالي؟\n\nx = 4\nx *= 3",
        options: ["7", "12", "1.33", "3"],
        correct: "12",
        explanation: "لأن x *= 3 معناها 4 × 3 = 12",
      },
    },
    {
      title: "عمليات المقارنة",
      subtitle: "إزاي نقارن بين القيم",
      explanation:
        "\nالمقارنات بتستخدم عشان نعرف إذا كانت القيم متساوية أو مختلفة أو أكبر/أصغر.\nالناتج بيكون دايمًا `True` أو `False` (صح أو غلط).\n",
      code: "\na = 5\nb = 3\n\nprint(a == b)   # هل a تساوي b؟ => False\nprint(a != b)   # هل a لا تساوي b؟ => True\nprint(a > b)    # هل a أكبر من b؟ => True\nprint(a < b)    # هل a أصغر من b؟ => False\nprint(a >= 5)   # هل a أكبر أو تساوي 5؟ => True\nprint(b <= 3)   # هل b أصغر أو تساوي 3؟ => True\n",
      output: "\nFalse\nTrue\nTrue\nFalse\nTrue\nTrue\n",
      notes:
        "\n- `==` معناها مقارنة، مش إسناد! (غير `=`)\n- الناتج بيستخدم في الشروط (if)، زي: `if x > 10:`\n",
      question: {
        type: "multiple",
        text: "ما نتيجة `7 != 7`؟",
        options: ["True", "False", "7", "None"],
        correct: "False",
        explanation: "لأن 7 تساوي 7، فـ `!=` (لا تساوي) هتكون False.",
      },
    },
    {
      title: "ترتيب العمليات الحسابية",
      subtitle: "إيه اللي بيتحسب الأول؟",
      explanation:
        "\nفي تعبير فيه أكتر من عملية، بايثون بيستخدم قواعد معينة لترتيب التنفيذ.\n\nالترتيب زي الآتي (من الأعلى للأولوية):\n1. () الأقواس\n2. ** الأس (القوة)\n3. * و / و // و % (الضرب والقسمة)\n4. + و - (الجمع والطرح)\n\nبنفس ترتيب الرياضيات العادي.\n",
      code: "\nresult = 2 + 3 * 4      # 3 * 4 = 12 + 2 = 14\nprint(result)\n\nresult = (2 + 3) * 4    # 5 * 4 = 20\nprint(result)\n",
      output: "\n14\n20\n",
      notes:
        "\n- دايمًا استخدم الأقواس لو عاوز تغير ترتيب التنفيذ.\n- بدون أقواس، الضرب والقسمة ليهم أولوية أعلى من الجمع والطرح.\n",
      question: {
        type: "multiple",
        text: "ما نتيجة `2 + 5 * 2`؟",
        options: ["14", "20", "12", "10"],
        correct: "12",
        explanation: "لأن الضرب بيتنفذ الأول: 5 * 2 = 10 ثم + 2 = 12",
      },
    },
    {
      title: "تحويل نوع البيانات",
      subtitle: "إزاي نحول بين الأنواع المختلفة",
      explanation:
        "\nساعات نحتاج نحول قيمة من نوع لنوع تاني، زي من نص لرقم أو من رقم صحيح لعشري.\n\nبايثون بتوفر دوال للتحويل:\n- int() لتحويل لعدد صحيح\n- float() لتحويل لعشري\n- str() لتحويل لنص\n- bool() لتحويل لـ True أو False\n",
      code: '\nx = "5"\ny = int(x)    # تحويل النص "5" لعدد صحيح\nprint(y + 2)   # 5 + 2 = 7\n\nz = str(10)    # تحويل الرقم لنص\nprint(z + "0")  # "10" + "0" => "100"\n',
      output: "\n7\n100\n",
      notes:
        '\n- لازم تتأكد إن النص ممكن يتحول لرقم، زي "5" أو "3.14".\n- لو حاولت تحول "hello" لـ int هيحصل خطأ.\n',
      question: {
        type: "multiple",
        text: 'ما ناتج الكود؟\n\nx = "7"\nprint(int(x) + 3)',
        options: ["10", "73", "خطأ", "7"],
        correct: "10",
        explanation: '"7" اتحولت لـ int = 7 + 3 = 10',
      },
    },
    {
      title: "استخدام f-string",
      subtitle: "طريقة ذكية لكتابة النصوص مع المتغيرات",
      explanation:
        "\nf-string هي طريقة حديثة وسهلة لدمج المتغيرات داخل النص.\n\nبتبدأ بـ حرف f قبل النص، وبتكتب المتغيرات داخل { }.\n",
      code: '\nname = "Ali"\nage = 20\n\nprint(f"اسمي {name} وسني {age} سنة")\n',
      output: "\nاسمي Ali وسني 20 سنة\n",
      notes:
        '\n- تقدر تستخدم تعبيرات جوه f-string زي: `f"2 + 3 = {2 + 3}"`\n- f-string أسرع وأوضح من الطرق القديمة زي concatenation.\n',
      question: {
        type: "multiple",
        text: 'ما نتيجة الكود؟\n\nx = 5\ny = 10\nprint(f"{x} + {y} = {x + y}")',
        options: ["5 + 10 = 15", "x + y = 15", "15", "خطأ"],
        correct: "5 + 10 = 15",
        explanation: "f-string بيطبع القيم: x = 5 و y = 10 => 5 + 10 = 15",
      },
    },
  ],
  lec4: [
    {
      title: "مقدمة عن if statement",
      subtitle: "إزاي نتحكم في مسار الكود بناءً على شرط",
      explanation:
        "\nجملة if بتخليك تاخد قرارات داخل البرنامج.\nيعني لو شرط معين اتحقق، ينفذ كود، ولو الشرط ما تحققش، يتجاهله.\n\nالصيغة العامة:\n```\nif شرط:\n    كود يتنفذ لو الشرط True\n```\n\nمثال بسيط:",
      code: 'x = 5\nif x > 3:\n    print("x أكبر من 3")',
      output: "\nx أكبر من 3\n",
      notes:
        "\n- الشرط بيتكتب بعد if ولازم ينتهي بنقطتين `:`.\n- لازم نكتب الكود اللي بعد if بمسافة بادئة (Indentation).\n",
      question: {
        type: "multiple",
        text: "ماذا يحدث إذا كان الشرط False؟",
        options: ["ينفذ الكود", "يُطبع خطأ", "يتجاهل الكود", "يكرر نفسه"],
        correct: "يتجاهل الكود",
        explanation: "لو الشرط False، بايثون بيتخطى الكود اللي تحت if.",
      },
    },
    {
      title: "elif و else",
      subtitle: "التفرع بين عدة حالات",
      explanation:
        "\nتقدر تستخدم `elif` لما يكون عندك أكتر من شرط.\nوتستخدم `else` لو كل الشروط فشلت.\n\nالصيغة:\n```\nif شرط1:\n    كود1\nelif شرط2:\n    كود2\nelse:\n    كود افتراضي\n```",
      code: 'x = 10\nif x < 5:\n    print("أقل من 5")\nelif x == 10:\n    print("يساوي 10")\nelse:\n    print("أكبر من 5 لكن مش 10")',
      output: "\nيساوي 10\n",
      notes:
        "\n- ممكن تضيف عدد غير محدود من elif.\n- else بتتنفذ فقط لو كل الشروط قبلها False.",
      question: {
        type: "multiple",
        text: "كم مرة يمكن استخدام elif؟",
        options: ["مرة واحدة", "مرتين", "عدد غير محدود", "ماينفعش نستخدمها"],
        correct: "عدد غير محدود",
        explanation: "تقدر تستخدم elif قد ما تحب، حسب الحاجة.",
      },
    },
    {
      title: "المقارنات في الشرط",
      subtitle: "علامات المقارنة اللي بنستخدمها في if",
      explanation:
        "\nالشرط في if لازم يرجع قيمة Boolean (صح أو خطأ).\nأشهر رموز المقارنة:\n\n- `==` : يساوي\n- `!=` : لا يساوي\n- `>`  : أكبر من\n- `<`  : أصغر من\n- `>=` : أكبر من أو يساوي\n- `<=` : أصغر من أو يساوي",
      code: 'x = 8\nif x != 5:\n    print("x لا يساوي 5")',
      output: "\nx لا يساوي 5\n",
      notes: "\n- خد بالك ما تخلطش بين = (إسناد) و == (مقارنة).\n",
      question: {
        type: "multiple",
        text: "أي من التالي صحيح؟\nلو x = 4، فإن x == 4 تكون:",
        options: ["False", "Error", "True", "None"],
        correct: "True",
        explanation: "لأن x فعلاً تساوي 4، فالمقارنة بترجع True.",
      },
    },
    {
      title: "استخدام and و or",
      subtitle: "شروط مركبة داخل if",
      explanation:
        "\nتقدر تجمع أكتر من شرط باستخدام:\n- `and`: لازم الشرطين يكونوا True\n- `or`: يكفي واحد منهم يكون True\n\nمثال:",
      code: 'x = 7\ny = 3\nif x > 5 and y < 5:\n    print("الشرطان صح")',
      output: "\nالشرطان صح\n",
      notes:
        "\n- استخدم () لو الشرط معقد عشان توضح الترتيب.\n- `not` كمان ممكن تعكس القيمة: `not True` = False.",
      question: {
        type: "multiple",
        text: "متى تكون الجملة التالية True؟\n`(x > 5 or x == 5)`",
        options: [
          "إذا x أقل من 5",
          "إذا x أكبر من أو يساوي 5",
          "دايمًا False",
          "مستحيل تتنفذ",
        ],
        correct: "إذا x أكبر من أو يساوي 5",
        explanation: "`or` معناها واحد من الشرطين يكفي يكون True.",
      },
    },
    {
      title: "القيم Truthy و Falsy في if",
      subtitle: "إزاي بايثون بتفهم الشرط لوحده حتى بدون مقارنة",
      explanation:
        "\nفي بايثون، مش لازم تكتب شرط بشكل صريح زي `x > 0`.\nأي قيمة تقدر تتقيم في if كـ True أو False.\n\n## القيم اللي تعتبر False (Falsy):\n- `None`\n- `False`\n- `0`, `0.0`\n- `''` (سلسلة فارغة)\n- `[]`, `{}`, `()` (قوائم ومجموعات فاضية)\n\nكل القيم التانية تعتبر True (Truthy).",
      code: 'name = ""\nif name:\n    print("مرحبا")\nelse:\n    print("الاسم فاضي")',
      output: "\nالاسم فاضي\n",
      notes:
        "\n- ده مفيد لما تتحقق من وجود بيانات.\nمثال: `if items:` لو فيها عناصر، يتنفذ الشرط.",
      question: {
        type: "multiple",
        text: 'ما نتيجة الكود التالي؟\nx = []\nif x:\n    print("فيه عناصر")\nelse:\n    print("فاضي")',
        options: ["فيه عناصر", "فاضي", "Error", "مافيش مخرجات"],
        correct: "فاضي",
        explanation: "لأن القائمة فاضية، وده يعتبر Falsy.",
      },
    },
    {
      title: "استخدام if مع input",
      subtitle: "نتفاعل مع المستخدم ونتحقق من إدخاله",
      explanation:
        "\nممكن نطلب من المستخدم إدخال بيانات، ونفحصها باستخدام if.\ninput بيرجع نص، فلو هنقارن أرقام لازم نحول بـ int().",
      code: 'name = input("ادخل اسمك: ")\nif name == "أحمد":\n    print("أهلاً أحمد!")\nelse:\n    print("أهلاً بيك!")',
      output: "\n(يعتمد على المدخلات)\n",
      notes:
        "\n- input دايمًا بيرجع نص (string)، حتى لو كتب رقم.\n- استخدم int(input(...)) لو محتاج رقم.",
      question: {
        type: "multiple",
        text: "ما نوع القيمة الراجعة من input()؟",
        options: ["int", "bool", "str", "float"],
        correct: "str",
        explanation: "input بيرجع نص، فلازم تحوّله لو عاوز رقم.",
      },
    },
    {
      title: "if متداخلة (Nested if)",
      subtitle: "إزاي نحط شرط داخل شرط",
      explanation:
        "\nتقدر تحط if جوه if، وده بنسميه if متداخلة.\nمفيد لما يكون القرار التاني معتمد على الشرط الأول.",
      code: 'x = 10\nif x > 5:\n    if x < 20:\n        print("x بين 5 و 20")',
      output: "\nx بين 5 و 20\n",
      notes:
        "\n- كل if داخلية لازم يكون ليها Indentation زيادة.\n- حاول ما تكثرش التداخل عشان الكود مايبقاش معقد.",
      question: {
        type: "multiple",
        text: 'هل هذا الكود صحيح؟\nif x > 0:\nprint("نعم")',
        options: ["نعم", "لا، بسبب التنسيق", "لا، شرط خطأ", "يحتاج else"],
        correct: "لا، بسبب التنسيق",
        explanation: "لازم يكون فيه مسافة بادئة تحت if (indentation).",
      },
    },
    {
      title: "التعبير الشرطي المختصر",
      subtitle: "لو عاوز تكتب شرط بسيط في سطر واحد",
      explanation:
        "\nالتعبير الشرطي المختصر اسمه (Ternary Operator)\nوبيكون بصيغة:\n\n`قيمة_لو_صح if شرط else قيمة_لو_خطأ`\n\nمفيد لو عندك شرط بسيط وعاوز تختصر الكود.",
      code: 'age = 16\nstatus = "بالغ" if age >= 18 else "قاصر"\nprint(status)',
      output: "\nقاصر\n",
      notes: "\n- استخدمه للحالات البسيطة.\n- مابنصحش تستخدمه مع شروط معقدة.",
      question: {
        type: "multiple",
        text: 'ما نتيجة الكود التالي؟\nx = 5\nmsg = "كبير" if x > 10 else "صغير"\nprint(msg)',
        options: ["كبير", "صغير", "خطأ", "مافيش مخرجات"],
        correct: "صغير",
        explanation: "x مش أكبر من 10، فبتتنفذ القيمة بعد else.",
      },
    },
  ],
};
