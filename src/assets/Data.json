{
  "lec2": [
    {
      "title": "أنواع البيانات في بايثون",
      "subtitle": "فهم الأنواع المختلفة للبيانات",
      "explanation": "\nبايثون فيها أنواع بيانات جاهزة تقدر تستخدمها على طول. دي أشهر الأنواع اللي هتتعامل معاها:\n\n1. الأرقام (Numbers): مثل الأعداد الصحيحة (int) والكسور (float)\n2. النصوص (Strings): مثل الجُمل أو الحروف\n3. القيمة المنطقية (Boolean): True أو False\n4. التجميعات (Collections): مثل القوائم (list) والقواميس (dict)\n\nتقدر تعرف نوع أي متغير باستخدام الدالة type().\n",
      "code": "\n# أرقام\ninteger = 42\nfloat_num = 3.14\n\n# نصوص\ntext = \"Hello World\"\nchar = 'A'\n\n# قيمة منطقية\nis_true = True\nis_false = False\n\n# تجميعات\nmy_list = [1, 2, 3]\nmy_dict = {\"key\": \"value\"}\n\n# معرفة نوع البيانات\nprint(type(42))        # <class 'int'>\nprint(type(3.14))      # <class 'float'>\nprint(type(\"Hello\"))   # <class 'str'>\n",
      "output": "\n<class 'int'>\n<class 'float'>\n<class 'str'>\n",
      "notes": "\n- Python بتحدد نوع البيانات تلقائيًا بناءً على القيمة.\n- استخدام type() بيساعدك تفهم الكود أكتر أثناء التصحيح.\n- مهم تعرف نوع البيانات علشان تستخدمها صح في العمليات المختلفة.\n",
      "question": {
        "text": "ما نوع البيانات في السطر التالي؟\n\nx = [1, 2, 3]",
        "options": ["int", "list", "float", "string"],
        "correct": "list",
        "explanation": "القوسين المربعين [ ] معناهم إن القيمة من النوع list (قائمة)."
      }
    },
    {
      "title": "المتغيرات في بايثون",
      "subtitle": "إزاي نخزن وندير البيانات",
      "explanation": "\nالمتغيرات (Variables) هي حاويات بنخزن فيها بيانات.\nفي بايثون، مش لازم تحدد نوع المتغير زي لغات تانية — بايثون بتفهم النوع تلقائيًا من القيمة اللي بتكتبها.\n",
      "code": "\n# إنشاء متغيرات\nname = \"Alice\"      # اسم\nage = 25            # سن\nheight = 5.6        # طول\nis_student = True   # طالب ولا لأ\n\n# المتغيرات ممكن تغير قيمتها\nage = 26\nname = \"Bob\"\n",
      "output": "\n(مفيش ناتج مباشر لأن الكود بيخزن فقط القيم في متغيرات.\nلكن لو عملت print(name)، النتيجة هتكون: Bob)\n",
      "notes": "\n- خد بالك! الحروف الكابيتال والسمول بتفرق في أسماء المتغيرات:\n  \"Age\" غير \"age\".\n- اسم المتغير لازم يبدأ بحرف أو _ (underscore) ومينفعش يبدأ برقم.\n- مينفعش تستخدم كلمات محجوزة زي (if، for، class) كأسماء متغيرات.\n",
      "question": {
        "type": "multiple",
        "text": "أي من التالي يُعتبر اسم متغير صحيح في بايثون؟",
        "options": ["1name", "name_1", "for", "is student"],
        "correct": "name_1",
        "explanation": "1name غلط لأنه بيبدأ برقم – وfor محجوزة – وis student فيه مسافة."
      }
    },

    {
      "title": "دالة الطباعة print()",
      "subtitle": "إزاي تطبع نتايج على الشاشة",
      "explanation": "\nدالة print() بتستخدم علشان تطبع أي حاجة على الكونسول (الشاشة).\nدي أهم أداة معاك علشان تعرض النتايج أو تجرب الكود.\n",
      "code": "\n# طباعة بسيطة\nprint(\"Hello, World!\")\nprint(42)\nprint(3.14)\n\n# طباعة متغيرات\nname = \"Alice\"\nage = 25\nprint(name)\nprint(\"My name is\", name)\nprint(\"I am\", age, \"years old\")\n\n# طباعة بصيغة منسقة\nprint(f\"Hi, I'm {name} and I'm {age} years old\")\n",
      "output": "\nHello, World!\n42\n3.14\nAlice\nMy name is Alice\nI am 25 years old\nHi, I'm Alice and I'm 25 years old\n",
      "notes": "\n- تقدر تطبع أكتر من قيمة في نفس السطر باستخدام فواصل.\n- استخدام f-string بيخليك تدمج المتغيرات داخل النص بشكل منسق وسهل.\n",
      "question": {
        "text": "ما نتيجة السطر التالي؟\n\nname = \"Ali\"\nprint(f\"Hello {name}\")",
        "options": ["Hello {name}", "Hello Ali", "Ali", "Error"],
        "correct": "Hello Ali",
        "explanation": "لأن f-string بتستبدل {name} بقيمة المتغير، فالناتج هو Hello Ali."
      }
    },
    {
      "title": "دالة الإدخال input()",
      "subtitle": "إزاي تاخد بيانات من المستخدم",
      "explanation": "\nدالة input() بتخلي البرنامج يقدر ياخد بيانات من المستخدم.\nبتطلع دايمًا String، ولو عايز تستخدم القيمة كرقم، لازم تحوّلها.\n",
      "code": "\n# ناخد إدخال من المستخدم\nname = input(\"What's your name? \")\nprint(\"Hello,\", name)\n\n# الإدخال بيكون String دايمًا\nage_str = input(\"How old are you? \")\nage = int(age_str) # نحولها لعدد صحيح\nprint(\"Next year you'll be\", age + 1)\n\n# تحويل مباشر\nheight = float(input(\"Your height in meters: \"))\nprint(f\"You are {height} meters tall\")\n",
      "output": "\nWhat's your name? Alice\nHello, Alice\nHow old are you? 25\nNext year you'll be 26\n",
      "notes": "\n- input() بترجع قيمة نصية (String).\n- لو محتاج تستخدم القيمة كرقم، لازم تحولها باستخدام int() أو float().\n- مهم جدًا تتأكد إن المستخدم كتب قيمة مناسبة علشان ميحصلش خطأ أثناء التحويل.\n",
      "question": {
        "text": "ما نوع البيانات الناتجة من السطر التالي؟\n\nx = input(\"Enter something: \")",
        "options": ["int", "float", "string", "boolean"],
        "correct": "string",
        "explanation": "دالة input() دائمًا بترجع String، حتى لو المستخدم كتب رقم."
      }
    },
    {
      "title": "الدوال (Functions)",
      "subtitle": "نظّم كودك عن طريق بلوكات تقدر تستخدمها كذا مرة",
      "explanation": "\nالدوال (Functions) هي بلوكات كود تقدر تستخدمها كذا مرة عشان تنفذ مهمة معينة.\nبتساعدك ترتب الكود وتقلل التكرار.\n",
      "code": "\n# تعريف دالة بسيطة\ndef greet():\n    print(\"Hello, World!\")\n\ngreet() # استدعاء الدالة\n\n# دالة فيها باراميتر\ndef greet_person(name):\n    print(f\"Hello, {name}!\")\n\ngreet_person(\"Alice\")\n\n# دالة بترجع قيمة\ndef add_numbers(a, b):\n    result = a + b\n    return result\n\nsum_result = add_numbers(5, 3)\nprint(sum_result) # Output: 8\n",
      "output": "\nHello, World!\nHello, Alice!\n8\n",
      "notes": "\n- الدوال بتنظّم الكود وتخليه أسهل في القراءة والصيانة.\n- تقدر تعيد استخدام الدالة أكتر من مرة بدل ما تكتب نفس الكود.\n- ممكن يكون فيها باراميترات وتُرجع قيمة.\n",
      "question": {
        "text": "ما ناتج السطر التالي؟\n\ndef add(a, b):\n    return a + b\n\nprint(add(2, 3))",
        "options": ["5", "6", "2", "None"],
        "correct": "5",
        "explanation": "الدالة add بتجمع الرقمين وتُرجع الناتج، وهو 2 + 3 = 5."
      }
    },
    {
      "title": "دالة len()",
      "subtitle": "اعرف طول العناصر",
      "explanation": "\nدالة len() بترجع عدد العناصر في عنصر معين زي String أو List أو Dictionary.\n",
      "code": "\n# طول النصوص (Strings)\nname = \"Alice\"\nprint(len(name)) # الناتج: 5\n\n# طول القوايم (Lists)\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers)) # الناتج: 5\n\n# طول القواميس (Dictionaries)\nperson = {\"name\": \"Alice\", \"age\": 25}\nprint(len(person)) # الناتج: 2\n\n# العناصر الفاضية بيكون طولها 0\nempty_string = \"\"\nempty_list = []\nprint(len(empty_string)) # الناتج: 0\nprint(len(empty_list)) # الناتج: 0\n",
      "output": "\n5\n5\n2\n0\n0\n",
      "notes": "\n- استخدم len() علشان تعرف إذا كان في حاجة فاضية أو عدد العناصر.\n- في النصوص بيعد الحروف، في القوايم بيعد العناصر، وفي القواميس بيعد الأزواج (مفتاح+قيمة).\n",
      "question": {
        "text": " ما ناتج الكود التالي؟\n\nprint(len([\"a\", \"b\", \"c\"]))",
        "options": ["2", "3", "1", "0"],
        "correct": "3",
        "explanation": "القائمة تحتوي على 3 عناصر، فlen() بترجع 3."
      }
    },
    {
      "title": "الكومنتات (التعليقات)",
      "subtitle": "علّق على الكود بتاعك",
      "explanation": "\nالكومنتات هي ملاحظات بتكتبها جوه الكود، وبايثون بتتجاهلها وقت التشغيل.\nبتساعدك إنت وأي حد تاني يفهم الكود بيعمل إيه.\n",
      "code": "\n# ده تعليق في سطر واحد\nname = \"Alice\" # تعليق في آخر السطر\n\n# ممكن تكتب أكتر من تعليق فوق بعض\n# كل سطر لازم يبدأ بـ #\nage = 25\n\n\"\"\"\nده تعليق متعدد الأسطر\nباستخدام الثلاث علامات تنصيص\nمفيد لو هتشرح حاجة كبيرة\n\"\"\"\n\n# TODO: محتاج تضيف فحص للأخطاء\nresult = age * 2\n",
      "output": "",
      "notes": "\n✅ تعليقات كويسة:\n- اشرح السبب مش بس الوظيفة\n- وضّح المنطق المعقد\n- نوّه لحاجات مهمة\n- علّم المهام اللي لسه ناقصة\n\n❌ تجنّب:\n- التعليقات اللي واضحة ومش محتاجة\n- معلومات قديمة\n- التعليقات الكتير أوي\n- تشرح كود مش كويس بدل ما تصلحه\n",
      "question": {
        "text": "ما الفائدة الرئيسية من استخدام التعليقات (comments) في الكود؟",
        "options": [
          "زيادة سرعة تنفيذ الكود",
          "جعل الكود غير قابل للقراءة",
          "شرح الكود وتوضيح المنطق",
          "تشغيل أوامر خاصة بالمترجم"
        ],
        "correct": "شرح الكود وتوضيح المنطق",
        "explanation": "التعليقات بتساعد المبرمجين يفهموا الغرض من الكود أو توثيق خطواته."
      }
    },

    {
      "title": "محرف السطر الجديد (\\n)",
      "subtitle": "إنشاء فواصل بين السطور في النصوص",
      "explanation": "\nمحرف السطر الجديد \\n بيعمل سطر جديد في النصوص.\nمفيد لما تحب تنسّق الإخراج أو تكتب أكتر من سطر في مرة واحدة.\n",
      "code": "\n# استخدام \\n داخل النصوص\nprint(\"Hello\\nWorld\")\n\n# أكثر من سطر جديد\nprint(\"Line 1\\nLine 2\\nLine 3\")\n\n# دمج مع بيانات تانية\nmessage = \"Name: Alice\\nAge: 25\\nCity: New York\"\nprint(message)\n\n# استخدامه داخل f-strings\nname = \"Bob\"\nage = 30\nprint(f\"Hello {name}!\\nYou are {age} years old.\")\n",
      "output": "\nHello\nWorld\nLine 1\nLine 2\nLine 3\nName: Alice\nAge: 25\nCity: New York\nHello Bob!\nYou are 30 years old.\n",
      "notes": "\n- \\n بيعمل سطر جديد في النصوص.\n- تقدر تستخدم 3 علامات تنصيص \"\"\" لإنشاء نص متعدد السطور.\n- في محارف خاصة تانية زي \\t (تبويب)، \\\"، \\'، و\\\\ (شرطة مائلة للخلف).\n",
      "question": {
        "text": "ما تأثير \\n في النص التالي؟\n\nprint(\"Hello\\nWorld\")",
        "options": [
          "يطبع HelloWorld في سطر واحد",
          "يطبع Hello وWorld في سطرين",
          "يطبع Hello\\nWorld حرفياً",
          "ينتج خطأ"
        ],
        "correct": "يطبع Hello وWorld في سطرين",
        "explanation": "محرف \\n بيعمل سطر جديد في النصوص، فالنص يطبع في سطرين."
      }
    },
    {
      "title": "ملخص بايثون",
      "subtitle": "تجميع كل اللي اتعلمناه في برنامج واحد",
      "explanation": "يلا نكتب برنامج بايثون كامل نستخدم فيه كل المفاهيم اللي اتعلمناها لحد دلوقتي – من غير دوال.",
      "code": "print(\"Welcome to the Person Info Calculator!\\n\")\n\nname = input(\"Enter your name: \")\nbirth_year = int(input(\"Enter your birth year: \"))\n\ncurrent_year = 2024\nage = current_year - birth_year\nname_length = len(name)\n\nprint(\"\\n\" + \"=\"*30)\nprint(\"YOUR INFORMATION\")\nprint(\"=\"*30)\nprint(f\"Name: {name}\")\nprint(f\"Age: {age}\")\nprint(f\"Name length: {name_length} characters\")",
      "output": "Welcome to the Person Info Calculator!\n\nEnter your name: Ahmed\nEnter your birth year: 2000\n\n==============================\nYOUR INFORMATION\n==============================\nName: Ahmed\nAge: 24\nName length: 5 characters",
      "notes": "🎉 مفاهيم استخدمناها:\n✓ المتغيرات\n✓ أنواع البيانات\n✓ print()\n✓ input()\n✓ len()\n✓ \\n\n✓ f-strings\n✓ العمليات الحسابية\n✓ تكرار الحروف في الطباعة",
      "question": {
        "text": "ما نوع البيانات التي تُخزن في المتغير \n\n name = input(\"Enter your name: \")\n ",
        "options": ["int", "string", "list", "bool"],
        "correct": "string",
        "explanation": "لأن قيمة name مأخوذة من input() وهي دايمًا نص (string)."
      }
    }
  ],
  "lec3": [
    {
      "title": "العمليات الحسابية في بايثون",
      "subtitle": "إزاي نستخدم الأرقام ونحسب بيها",
      "explanation": "العمليات الحسابية (Arithmetic Operators) بتسمحلك تنفذ حسابات زي الجمع والطرح والضرب.\nفي بايثون، تقدر تستخدم الرموز دي مع الأرقام:\n\n+  : الجمع\n-  : الطرح\n*  : الضرب\n/  : القسمة\n// : القسمة بدون باقي (عدد صحيح)\n%  : باقي القسمة (modulus)\n** : القوة (أس)\n",
      "code": "\na = 10\nb = 3\n\nprint(a + b)   # جمع => 13\nprint(a - b)   # طرح => 7\nprint(a * b)   # ضرب => 30\nprint(a / b)   # قسمة عادية => 3.333...\nprint(a // b)  # قسمة بدون كسور => 3\nprint(a % b)   # باقي القسمة => 1\nprint(a ** b)  # 10 أس 3 => 1000\n",
      "output": "\n13\n7\n30\n3.3333333333333335\n3\n1\n1000\n",
      "notes": "\n- القسمة `/` دايمًا بتدي ناتج عشري (float).\n- `%` بتستخدم كتير في معرفة الأرقام الفردية والزوجية.\nمثال: `if x % 2 == 0` يبقى x زوجي.\n",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة 2 ** 3 في بايثون؟",
        "options": ["6", "8", "9", "5"],
        "correct": "8",
        "explanation": "لأن 2 ** 3 معناها 2 مرفوع للقوة 3 = 2 × 2 × 2 = 8."
      }
    },
    {
      "title": "عمليات الإسناد",
      "subtitle": "إزاي ندي قيمة لمتغير ونتحكم فيها",
      "explanation": "\nعمليات الإسناد (Assignment Operators) بتُستخدم عشان تخزن قيمة في متغير، أو تعدل عليه.\nأشهرهم هو `=`، بس في كمان طرق مختصرة لعمليات تانية.\n",
      "code": "\nx = 10     # إسناد عادي\nx += 5     # نفس x = x + 5 => x = 15\nx -= 3     # نفس x = x - 3 => x = 12\nx *= 2     # نفس x = x * 2 => x = 24\nx /= 4     # نفس x = x / 4 => x = 6.0\n",
      "output": "\n6.0\n",
      "notes": "\n- العلامات المركبة (+=، -=، ...) بتخلي الكود أبسط وأسهل.\n- الناتج من القسمة `/=` بيكون دايمًا عشري (float).\n",
      "question": {
        "type": "multiple",
        "text": "ما قيمة x بعد تنفيذ الكود التالي؟\n\nx = 4\nx *= 3",
        "options": ["7", "12", "1.33", "3"],
        "correct": "12",
        "explanation": "لأن x *= 3 معناها 4 × 3 = 12"
      }
    },
    {
      "title": "عمليات المقارنة",
      "subtitle": "إزاي نقارن بين القيم",
      "explanation": "\nالمقارنات بتستخدم عشان نعرف إذا كانت القيم متساوية أو مختلفة أو أكبر/أصغر.\nالناتج بيكون دايمًا `True` أو `False` (صح أو غلط).\n",
      "code": "\na = 5\nb = 3\n\nprint(a == b)   # هل a تساوي b؟ => False\nprint(a != b)   # هل a لا تساوي b؟ => True\nprint(a > b)    # هل a أكبر من b؟ => True\nprint(a < b)    # هل a أصغر من b؟ => False\nprint(a >= 5)   # هل a أكبر أو تساوي 5؟ => True\nprint(b <= 3)   # هل b أصغر أو تساوي 3؟ => True\n",
      "output": "\nFalse\nTrue\nTrue\nFalse\nTrue\nTrue\n",
      "notes": "\n- `==` معناها مقارنة، مش إسناد! (غير `=`)\n- الناتج بيستخدم في الشروط (if)، زي: `if x > 10:`\n",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة `7 != 7`؟",
        "options": ["True", "False", "7", "None"],
        "correct": "False",
        "explanation": "لأن 7 تساوي 7، فـ `!=` (لا تساوي) هتكون False."
      }
    },
    {
      "title": "ترتيب العمليات الحسابية",
      "subtitle": "إيه اللي بيتحسب الأول؟",
      "explanation": "\nفي تعبير فيه أكتر من عملية، بايثون بيستخدم قواعد معينة لترتيب التنفيذ.\n\nالترتيب زي الآتي (من الأعلى للأولوية):\n1. () الأقواس\n2. ** الأس (القوة)\n3. * و / و // و % (الضرب والقسمة)\n4. + و - (الجمع والطرح)\n\nبنفس ترتيب الرياضيات العادي.\n",
      "code": "\nresult = 2 + 3 * 4      # 3 * 4 = 12 + 2 = 14\nprint(result)\n\nresult = (2 + 3) * 4    # 5 * 4 = 20\nprint(result)\n",
      "output": "\n14\n20\n",
      "notes": "\n- دايمًا استخدم الأقواس لو عاوز تغير ترتيب التنفيذ.\n- بدون أقواس، الضرب والقسمة ليهم أولوية أعلى من الجمع والطرح.\n",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة `2 + 5 * 2`؟",
        "options": ["14", "20", "12", "10"],
        "correct": "12",
        "explanation": "لأن الضرب بيتنفذ الأول: 5 * 2 = 10 ثم + 2 = 12"
      }
    },
    {
      "title": "تحويل نوع البيانات",
      "subtitle": "إزاي نحول بين الأنواع المختلفة",
      "explanation": "\nساعات نحتاج نحول قيمة من نوع لنوع تاني، زي من نص لرقم أو من رقم صحيح لعشري.\n\nبايثون بتوفر دوال للتحويل:\n- int() لتحويل لعدد صحيح\n- float() لتحويل لعشري\n- str() لتحويل لنص\n- bool() لتحويل لـ True أو False\n",
      "code": "\nx = \"5\"\ny = int(x)    # تحويل النص \"5\" لعدد صحيح\nprint(y + 2)   # 5 + 2 = 7\n\nz = str(10)    # تحويل الرقم لنص\nprint(z + \"0\")  # \"10\" + \"0\" => \"100\"\n",
      "output": "\n7\n100\n",
      "notes": "\n- لازم تتأكد إن النص ممكن يتحول لرقم، زي \"5\" أو \"3.14\".\n- لو حاولت تحول \"hello\" لـ int هيحصل خطأ.\n",
      "question": {
        "type": "multiple",
        "text": "ما ناتج الكود؟\n\nx = \"7\"\nprint(int(x) + 3)",
        "options": ["10", "73", "خطأ", "7"],
        "correct": "10",
        "explanation": "\"7\" اتحولت لـ int = 7 + 3 = 10"
      }
    },
    {
      "title": "استخدام f-string",
      "subtitle": "طريقة ذكية لكتابة النصوص مع المتغيرات",
      "explanation": "\nf-string هي طريقة حديثة وسهلة لدمج المتغيرات داخل النص.\n\nبتبدأ بـ حرف f قبل النص، وبتكتب المتغيرات داخل { }.\n",
      "code": "\nname = \"Ali\"\nage = 20\n\nprint(f\"اسمي {name} وسني {age} سنة\")\n",
      "output": "\nاسمي Ali وسني 20 سنة\n",
      "notes": "\n- تقدر تستخدم تعبيرات جوه f-string زي: `f\"2 + 3 = {2 + 3}\"`\n- f-string أسرع وأوضح من الطرق القديمة زي concatenation.\n",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود؟\n\nx = 5\ny = 10\nprint(f\"{x} + {y} = {x + y}\")",
        "options": ["5 + 10 = 15", "x + y = 15", "15", "خطأ"],
        "correct": "5 + 10 = 15",
        "explanation": "f-string بيطبع القيم: x = 5 و y = 10 => 5 + 10 = 15"
      }
    },
    {
      "title": "أداة العمليات الحسابية المصغّرة",
      "subtitle": "برنامج يجري كل العمليات الحسابية على رقمين",
      "explanation": "المستخدم بيدخل رقمين، والبرنامج بيحسب ويعرض ناتج كل العمليات الأساسية (جمع، طرح، ضرب، قسمة... إلخ) باستخدام العمليات الرياضية في بايثون.",
      "code": "print(\"Welcome to the Mini Math Tool!\")\n\nnum1 = float(input(\"Enter the first number: \"))\nnum2 = float(input(\"Enter the second number: \"))\n\nprint(f\"\\nAddition: {num1} + {num2} = {num1 + num2}\")\nprint(f\"Subtraction: {num1} - {num2} = {num1 - num2}\")\nprint(f\"Multiplication: {num1} * {num2} = {num1 * num2}\")\nprint(f\"Division: {num1} / {num2} = {num1 / num2}\")\nprint(f\"Floor Division: {num1} // {num2} = {num1 // num2}\")\nprint(f\"Remainder: {num1} % {num2} = {num1 % num2}\")\nprint(f\"Power: {num1} ** {num2} = {num1 ** num2}\")",
      "output": "Welcome to the Mini Math Tool!\nEnter the first number: 10\nEnter the second number: 5\n\nAddition: 10.0 + 5.0 = 15.0\nSubtraction: 10.0 - 5.0 = 5.0\nMultiplication: 10.0 * 5.0 = 50.0\nDivision: 10.0 / 5.0 = 2.0\nFloor Division: 10.0 // 5.0 = 2.0\nRemainder: 10.0 % 5.0 = 0.0\nPower: 10.0 ** 5.0 = 100000.0",
      "notes": "- استخدمنا `float()` لتحويل إدخال المستخدم لأرقام عشرية.\n- الكود بيطبع كل نتيجة باستخدام f-string لسهولة التنسيق.\n- البرنامج بيعرض العمليات كلها بشكل منسق ومرتب.\n- ممكن نطوّره لاحقًا ليتحقق من القسمة على صفر لتجنّب الخطأ.",
      "question": {
        "text": "ما نتيجة العملية التالية عند إدخال الرقمين 7 و 2؟\n\nprint(f\"Power: {num1} ** {num2} = {num1 ** num2}\")",
        "options": ["14", "49", "128", "7"],
        "correct": "49",
        "explanation": "العملية `**` معناها الأس (الرفع للقوة)، فـ 2 ** 7 = 49."
      }
    }
  ],
  "lec4": [
    {
      "title": "مقدمة عن if statement",
      "subtitle": "إزاي نتحكم في مسار الكود بناءً على شرط",
      "explanation": "\nجملة if بتخليك تاخد قرارات داخل البرنامج.\nيعني لو شرط معين اتحقق، ينفذ كود، ولو الشرط ما تحققش، يتجاهله.\n\nالصيغة العامة:\n```\nif شرط:\n    كود يتنفذ لو الشرط True\n```\n\nمثال بسيط:",
      "code": "x = 5\nif x > 3:\n    print(\"x is greater than 3\")",
      "output": "\nx is greater than 3\n",
      "notes": "\n- الشرط بيتكتب بعد if ولازم ينتهي بنقطتين `:`.\n- لازم نكتب الكود اللي بعد if بمسافة بادئة (Indentation).\n",
      "question": {
        "type": "multiple",
        "text": "ماذا يحدث إذا كان الشرط False؟",
        "options": ["ينفذ الكود", "يُطبع خطأ", "يتجاهل الكود", "يكرر نفسه"],
        "correct": "يتجاهل الكود",
        "explanation": "لو الشرط False، بايثون بيتخطى الكود اللي تحت if."
      }
    },
    {
      "title": "elif و else",
      "subtitle": "التفرع بين عدة حالات",
      "explanation": "\nتقدر تستخدم `elif` لما يكون عندك أكتر من شرط.\nوتستخدم `else` لو كل الشروط فشلت.\n\nالصيغة:\n```\nif شرط1:\n    كود1\nelif شرط2:\n    كود2\nelse:\n    كود افتراضي\n```",
      "code": "x = 10\nif x < 5:\n    print(\"Less than 5\")\nelif x == 10:\n    print(\"Equal to 10\")\nelse:\n    print(\"Greater than 5 but not 10\")",
      "output": "Equal to 10\n",
      "notes": "\n- ممكن تضيف عدد غير محدود من (elif).\n  -  (else) بتتنفذ فقط لو كل الشروط قبلها False.",
      "question": {
        "type": "multiple",
        "text": "كم مرة يمكن استخدام elif؟",
        "options": ["مرة واحدة", "مرتين", "عدد غير محدود", "ماينفعش نستخدمها"],
        "correct": "عدد غير محدود",
        "explanation": "تقدر تستخدم elif قد ما تحب، حسب الحاجة."
      }
    },
    {
      "title": "المقارنات في الشرط",
      "subtitle": "علامات المقارنة اللي بنستخدمها في if",
      "explanation": "\nالشرط في if لازم يرجع قيمة Boolean (صح أو خطأ).\nأشهر رموز المقارنة:\n\n- `==` : يساوي\n- `!=` : لا يساوي\n- `>`  : أكبر من\n- `<`  : أصغر من\n- `>=` : أكبر من أو يساوي\n- `<=` : أصغر من أو يساوي",
      "code": "x = 8\nif x != 5:\n    print(\"x is not equal to 5\")",
      "output": "x is not equal to 5\n",
      "notes": "\n- خد بالك ما تخلطش بين = (إسناد) و == (مقارنة).\n",
      "question": {
        "type": "multiple",
        "text": "أي من التالي صحيح؟\nلو x = 4، فإن x == 4 تكون:",
        "options": ["False", "Error", "True", "None"],
        "correct": "True",
        "explanation": "لأن x فعلاً تساوي 4، فالمقارنة بترجع True."
      }
    },
    {
      "title": "استخدام and و or",
      "subtitle": "شروط مركبة داخل if",
      "explanation": "\nتقدر تجمع أكتر من شرط باستخدام:\n- `and`: لازم الشرطين يكونوا True\n- `or`: يكفي واحد منهم يكون True\n\nمثال:",
      "code": "x = 7\ny = 3\nif x > 5 and y < 5:\n    print(\"Both conditions are True\")",
      "output": "Both conditions are True\n",
      "notes": "\n- استخدم () لو الشرط معقد عشان توضح الترتيب.\n- `not` كمان ممكن تعكس القيمة: `not True` = False.",
      "question": {
        "type": "multiple",
        "text": "متى تكون الجملة التالية True؟\n`(x > 5 or x == 5)`",
        "options": [
          "إذا x أقل من 5",
          "إذا x أكبر من أو يساوي 5",
          "دايمًا False",
          "مستحيل تتنفذ"
        ],
        "correct": "إذا x أكبر من أو يساوي 5",
        "explanation": "`or` معناها واحد من الشرطين يكفي يكون True."
      }
    },
    {
      "title": "القيم Truthy و Falsy في if",
      "subtitle": "إزاي بايثون بتفهم الشرط لوحده حتى بدون مقارنة",
      "explanation": "\nفي بايثون، مش لازم تكتب شرط بشكل صريح زي `x > 0`.\nأي قيمة تقدر تتقيم في if كـ True أو False.\n\n## القيم اللي تعتبر False (Falsy):\n- `None`\n- `False`\n- `0`, `0.0`\n- `''` (سلسلة فارغة)\n- `[]`, `{}`, `()` (قوائم ومجموعات فاضية)\n\nكل القيم التانية تعتبر True (Truthy).",
      "code": "name = \"\"\nif name:\n    print(\"Hello\")\nelse:\n    print(\"Name is empty\")",
      "output": "Name is empty\n",
      "notes": "\n- ده مفيد لما تتحقق من وجود بيانات.\nمثال: `if items:` لو فيها عناصر، يتنفذ الشرط.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود التالي؟\nx = []\nif x:\n    print(\"فيه عناصر\")\nelse:\n    print(\"فاضي\")",
        "options": ["فيه عناصر", "فاضي", "Error", "مافيش مخرجات"],
        "correct": "فاضي",
        "explanation": "لأن القائمة فاضية، وده يعتبر Falsy."
      }
    },
    {
      "title": "استخدام if مع input",
      "subtitle": "نتفاعل مع المستخدم ونتحقق من إدخاله",
      "explanation": "\nممكن نطلب من المستخدم إدخال بيانات، ونفحصها باستخدام if.\ninput بيرجع نص، فلو هنقارن أرقام لازم نحول بـ int().",
      "code": "name = input(\"Enter your name: \")\nif name == \"Ahmed\":\n    print(\"Hello Ahmed!\")\nelse:\n    print(\"Welcome!\")",
      "output": "(depends on user input)\n",
      "notes": "\n- input دايمًا بيرجع نص (string)، حتى لو كتب رقم.\n- استخدم int(input(...)) لو محتاج رقم.",
      "question": {
        "type": "multiple",
        "text": "ما نوع القيمة الراجعة من input()؟",
        "options": ["int", "bool", "str", "float"],
        "correct": "str",
        "explanation": "input بيرجع نص، فلازم تحوّله لو عاوز رقم."
      }
    },
    {
      "title": "if متداخلة (Nested if)",
      "subtitle": "إزاي نحط شرط داخل شرط",
      "explanation": "\nتقدر تحط if جوه if، وده بنسميه if متداخلة.\nمفيد لما يكون القرار التاني معتمد على الشرط الأول.",
      "code": "x = 10\nif x > 5:\n    if x < 20:\n        print(\"x is between 5 and 20\")",
      "output": "x is between 5 and 20\n",
      "notes": "\n- كل if داخلية لازم يكون ليها Indentation زيادة.\n- حاول ما تكثرش التداخل عشان الكود مايبقاش معقد.",
      "question": {
        "type": "multiple",
        "text": "هل هذا الكود صحيح؟\nif x > 0:\nprint(\"نعم\")",
        "options": ["نعم", "لا، بسبب التنسيق", "لا، شرط خطأ", "يحتاج else"],
        "correct": "لا، بسبب التنسيق",
        "explanation": "لازم يكون فيه مسافة بادئة تحت if (indentation)."
      }
    },
    {
      "title": "التعبير الشرطي المختصر",
      "subtitle": "لو عاوز تكتب شرط بسيط في سطر واحد",
      "explanation": "\nالتعبير الشرطي المختصر اسمه (Ternary Operator)\nوبيكون بصيغة:\n\n code1 if (condition) else code2 \n\nمفيد لو عندك شرط بسيط وعاوز تختصر الكود.",
      "code": "age = 16\nstatus = \"Adult\" if age >= 18 else \"Minor\"\nprint(status)",
      "output": "Minor\n",
      "notes": "\n- استخدمه للحالات البسيطة.\n- مابنصحش تستخدمه مع شروط معقدة.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود التالي؟\nx = 5\nmsg = \"كبير\" if x > 10 else \"صغير\"\nprint(msg)",
        "options": ["كبير", "صغير", "خطأ", "مافيش مخرجات"],
        "correct": "صغير",
        "explanation": "x مش أكبر من 10، فبتتنفذ القيمة بعد else."
      }
    }
  ]
}
