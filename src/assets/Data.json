{
  "lec2": [
    {
      "title": "أنواع البيانات في بايثون",
      "subtitle": "فهم الأنواع المختلفة للبيانات",
      "explanation": "\nفي لغة بايثون، فيه أنواع بيانات جاهزة ممكن تستخدمها مباشرة بدون ما تعرّفها أو تعمل إعدادات خاصة. كل نوع ليه طريقة استخدامه ومجموعة العمليات اللي ينفع تطبقها عليه. أشهر أنواع البيانات اللي هتقابلها:\n\n1. **الأرقام (Numbers)**: تشمل الأعداد الصحيحة (int) مثل 10 أو -5، وأعداد الكسور العشرية (float) مثل 3.14 أو -0.5.\n2. **النصوص (Strings)**: وهي عبارة عن مجموعة من الحروف أو الكلمات أو الجُمل، وتكون بين علامات تنصيص مفردة أو مزدوجة.\n3. **القيمة المنطقية (Boolean)**: القيمتين `True` أو `False` وتُستخدم للتعبير عن الحالات الشرطية.\n4. **التجميعات (Collections)**: مثل القوائم (list) اللي بتخزن أكتر من عنصر بترتيب، أو القواميس (dict) اللي بتخزن بيانات على شكل (مفتاح: قيمة).\n\nممكن تعرف نوع أي قيمة أو متغير باستخدام الدالة المدمجة `type()`، وهي مفيدة جدًا لمعرفة البيانات أثناء اختبار أو تصحيح الكود.",
      "code": "\n# أرقام\ninteger = 42\nfloat_num = 3.14\n\n# نصوص\ntext = \"Hello World\"\nchar = 'A'\n\n# قيمة منطقية\nis_true = True\nis_false = False\n\n# تجميعات\nmy_list = [1, 2, 3]\nmy_dict = {\"key\": \"value\"}\n\n# معرفة نوع البيانات\nprint(type(42))        # <class 'int'>\nprint(type(3.14))      # <class 'float'>\nprint(type(\"Hello\"))   # <class 'str'>",
      "output": "\n<class 'int'>\n<class 'float'>\n<class 'str'>",
      "notes": "\n- لغة بايثون بتحدد نوع البيانات تلقائيًا بناءً على القيمة اللي كتبتها.\n- استخدام `type()` بيساعدك تعرف نوع المتغير لو كنت مش متأكد.\n- معرفة نوع البيانات مهمة علشان تختار العمليات اللي ينفع تطبقها على المتغير.\n",
      "question": {
        "text": "ما نوع البيانات في السطر التالي؟\n\nx = [1, 2, 3]",
        "options": ["int", "list", "float", "string"],
        "correct": "list",
        "explanation": "الأقواس المربعة [ ] في بايثون بتعني إن القيمة من النوع list (قائمة)."
      }
    },
    {
      "title": "المتغيرات في بايثون",
      "subtitle": "إزاي نخزن وندير البيانات",
      "explanation": "\nالمتغيرات (Variables) هي أماكن بنخزن فيها البيانات علشان نقدر نستخدمها أو نعدل عليها لاحقًا. تقدر تعتبر المتغير كصندوق عليه اسم، بتحط جواه قيمة.\nفي بايثون، مش محتاج تحدد نوع البيانات وقت إنشاء المتغير، لأن بايثون بتحدد النوع تلقائي من القيمة اللي كتبتها. وده بيسهّل عليك الكتابة مقارنة بلغات تانية بتحتاج تحدد النوع يدوي.",
      "code": "\n# إنشاء متغيرات\nname = \"Alice\"      # نص (String)\nage = 25            # عدد صحيح (Integer)\nheight = 5.6        # عدد عشري (Float)\nis_student = True   # قيمة منطقية (Boolean)\n\n# تغيير قيم المتغيرات\nage = 26\nname = \"Bob\"",
      "output": "\n(الكود هنا بيخزن القيم فقط، مفيش ناتج مباشر إلا لو استخدمنا print.)",
      "notes": "\n- الحروف الكبيرة والصغيرة بتفرق في أسماء المتغيرات: `Age` غير `age`.\n- اسم المتغير لازم يبدأ بحرف أو بـ _ (underscore)، ومينفعش يبدأ برقم.\n- مينفعش تستخدم كلمات محجوزة زي if، for، class كأسماء متغيرات.\n",
      "question": {
        "type": "multiple",
        "text": "أي من التالي يُعتبر اسم متغير صحيح في بايثون؟",
        "options": ["1name", "name_1", "for", "is student"],
        "correct": "name_1",
        "explanation": "`1name` غلط لأنه بيبدأ برقم – و`for` كلمة محجوزة – و`is student` فيه مسافة."
      }
    },
    {
      "title": "دالة الطباعة print()",
      "subtitle": "إزاي تطبع نتايج على الشاشة",
      "explanation": "\nدالة `print()` هي واحدة من أهم الأدوات في بايثون، وبتستخدم لطباعة النصوص أو القيم على الشاشة علشان تشوف النتيجة أو تتأكد إن الكود شغال صح.\nممكن تستخدمها لطباعة نصوص ثابتة، أو القيم اللي مخزنة في متغيرات، أو حتى عمليات حسابية مباشرة.",
      "code": "\n# طباعة نصوص مباشرة\nprint(\"Hello, World!\")\nprint(42)\nprint(3.14)\n\n# طباعة متغيرات\nname = \"Alice\"\nage = 25\nprint(name)\nprint(\"My name is\", name)\nprint(\"I am\", age, \"years old\")",
      "output": "\nHello, World!\n42\n3.14\nAlice\nMy name is Alice\nI am 25 years old",
      "notes": "\n- ممكن تطبع أكتر من قيمة في نفس السطر باستخدام الفواصل.\n- `print()` بتحط مسافة تلقائي بين القيم لما تستخدم فواصل.\n- لو عايز تطبع نصوص مع متغيرات بدون دمج يدوي، ممكن تستخدم أساليب التنسيق القديمة زي `%` أو `.format()` بدل الـ f-string.\n",
      "question": {
        "text": "ما ناتج السطر التالي؟\n\nname = \"Ali\"\nprint(\"Hello\", name)",
        "options": ["Hello name", "Hello Ali", "Ali", "Error"],
        "correct": "Hello Ali",
        "explanation": "لأن `print()` هنا بتطبع الكلمة Hello وبعدها قيمة المتغير name وهي Ali."
      }
    },
    {
      "title": "دالة الإدخال input()",
      "subtitle": "إزاي تاخد بيانات من المستخدم",
      "explanation": "\nدالة `input()` بتخلي البرنامج يوقف التنفيذ مؤقتًا علشان ينتظر إن المستخدم يكتب حاجة في الكيبورد، وبعدين بترجع اللي المستخدم كتبه كنص (String) حتى لو كتب أرقام.\nده معناه إنك لو محتاج الرقم كعدد صحيح أو عشري، لازم تحوله بنفسك باستخدام دوال التحويل زي `int()` أو `float()`.\nده مفيد جدًا لو بتعمل برامج تفاعلية، زي الآلات الحاسبة أو تسجيل بيانات.\n",
      "code": "\n# ناخد إدخال نصي من المستخدم\nname = input(\"What's your name? \")\nprint(\"Hello,\", name)\n\n# ناخد إدخال رقمي من المستخدم\nage_str = input(\"How old are you? \")\nage = int(age_str) # تحويل النص إلى عدد صحيح\nprint(\"Next year you'll be\", age + 1)\n\n# تحويل مباشر لعدد عشري\nheight = float(input(\"Your height in meters: \"))\nprint(\"You are\", height, \"meters tall\")",
      "output": "\nWhat's your name? Alice\nHello, Alice\nHow old are you? 25\nNext year you'll be 26\nYour height in meters: 1.65\nYou are 1.65 meters tall",
      "notes": "\n- `input()` دايمًا بترجع نص (String) حتى لو المستخدم كتب أرقام.\n- لازم تستخدم `int()` أو `float()` لو عايز تحول الإدخال لرقم.\n- الأفضل تتحقق من إن الإدخال صحيح قبل التحويل علشان تتجنب الأخطاء.\n",
      "question": {
        "text": "ما نوع البيانات الناتجة من السطر التالي؟\n\nx = input(\"Enter something: \")",
        "options": ["int", "float", "string", "boolean"],
        "correct": "string",
        "explanation": "دالة `input()` دائمًا بترجع نص (String) حتى لو الإدخال كان رقم."
      }
    },
    {
      "title": "دالة len()",
      "subtitle": "اعرف طول العناصر",
      "explanation": "\nدالة `len()` هي دالة مدمجة في بايثون بترجع عدد العناصر داخل كائن زي النصوص، القوائم، أو القواميس.\nفي النصوص، `len()` بترجع عدد الحروف بما فيها المسافات.\nفي القوائم، بترجع عدد العناصر.\nفي القواميس، بترجع عدد الأزواج (مفتاح + قيمة).\n",
      "code": "\n# طول النصوص\nname = \"Alice\"\nprint(len(name)) # الناتج: 5\n\n# طول القوائم\nnumbers = [1, 2, 3, 4, 5]\nprint(len(numbers)) # الناتج: 5\n\n# طول القواميس\nperson = {\"name\": \"Alice\", \"age\": 25}\nprint(len(person)) # الناتج: 2\n\n# عناصر فاضية\nempty_string = \"\"\nempty_list = []\nprint(len(empty_string)) # 0\nprint(len(empty_list))   # 0",
      "output": "\n5\n5\n2\n0\n0",
      "notes": "\n- `len()` مفيدة لمعرفة طول البيانات أو التأكد إذا كانت فارغة.\n- في النصوص، بيتم حساب كل الحروف بما فيها المسافات.\n- في القواميس، بيتم حساب عدد المفاتيح.\n",
      "question": {
        "text": "ما ناتج الكود التالي؟\n\nprint(len([\"a\", \"b\", \"c\"]))",
        "options": ["2", "3", "1", "0"],
        "correct": "3",
        "explanation": "القائمة فيها 3 عناصر، فالدالة `len()` بترجع 3."
      }
    },
    {
      "title": "الكومنتات (التعليقات)",
      "subtitle": "علّق على الكود بتاعك",
      "explanation": "\nالتعليقات (Comments) هي نصوص بيكتبها المبرمج داخل الكود علشان تشرح أو توضح وظيفة جزء معين.\nالمترجم بيتجاهل التعليقات وقت تشغيل البرنامج، وده معناه إنها مش بتأثر على الأداء أو النتيجة.\nالتعليقات بتساعدك ترجع للكود بعد فترة وتفهمه بسرعة، وكمان بتفيد أي حد بيقرأ الكود بعدك.\n",
      "code": "\n# تعليق في سطر واحد\nname = \"Alice\"  # تعليق في نهاية السطر\n\n# كتابة عدة تعليقات متتالية\n# كل سطر يبدأ بـ #\nage = 25\n\n\"\"\"\nتعليق متعدد الأسطر\nباستخدام ثلاث علامات تنصيص\nمفيد لشرح أجزاء كبيرة من الكود\n\"\"\"\n\n# TODO: إضافة التحقق من صحة البيانات لاحقًا\nresult = age * 2",
      "output": "",
      "notes": "\n✅ استخدم التعليقات لـ:\n- شرح سبب كتابة الكود.\n- توضيح الأجزاء المعقدة.\n- التنويه للمهام الناقصة.\n\n❌ تجنب:\n- كتابة تعليقات واضحة جدًا بلا داع.\n- ترك تعليقات قديمة ومضللة.\n- استخدام التعليقات بدل تحسين الكود نفسه.\n",
      "question": {
        "text": "ما الفائدة الرئيسية من استخدام التعليقات في الكود؟",
        "options": [
          "زيادة سرعة تنفيذ الكود",
          "جعل الكود غير قابل للقراءة",
          "شرح الكود وتوضيح المنطق",
          "تشغيل أوامر خاصة بالمترجم"
        ],
        "correct": "شرح الكود وتوضيح المنطق",
        "explanation": "التعليقات بتساعد المبرمجين يفهموا الغرض من الكود وخطواته."
      }
    },
    {
      "title": "محرف السطر الجديد (\\n)",
      "subtitle": "إنشاء فواصل بين السطور في النصوص",
      "explanation": "\nمحرف السطر الجديد `\\n` بيستخدم علشان يعمل كسر سطر، يعني أي نص بعده يطلع في سطر جديد.\nده بيكون مفيد في ترتيب الإخراج أو عرض البيانات على شكل منظم.\n",
      "code": "\n# استخدام \\n داخل النصوص\nprint(\"Hello\\nWorld\")\n\n# أكثر من سطر جديد\nprint(\"Line 1\\nLine 2\\nLine 3\")\n\n# مثال عملي\nmessage = \"Name: Alice\\nAge: 25\\nCity: New York\"\nprint(message)",
      "output": "\nHello\nWorld\nLine 1\nLine 2\nLine 3\nName: Alice\nAge: 25\nCity: New York",
      "notes": "\n- `\\n` بيعمل سطر جديد.\n- ممكن تستخدم ثلاث علامات تنصيص `\"\"\"` لكتابة نصوص متعددة الأسطر.\n- فيه محارف خاصة تانية زي `\\t` للمسافة البادئة، و`\\\\` للشرطة المائلة.\n",
      "question": {
        "text": "ما تأثير \\n في النص التالي؟\n\nprint(\"Hello\\nWorld\")",
        "options": [
          "يطبع HelloWorld في سطر واحد",
          "يطبع Hello وWorld في سطرين",
          "يطبع Hello\\nWorld حرفيًا",
          "ينتج خطأ"
        ],
        "correct": "يطبع Hello وWorld في سطرين",
        "explanation": "`\\n` بيكسر السطر، فالنص بيظهر في سطرين."
      }
    },
    {
      "title": "ملخص بايثون",
      "subtitle": "تجميع كل اللي اتعلمناه في برنامج واحد",
      "explanation": "هنا هنكتب برنامج بايثون كامل نستخدم فيه كل المفاهيم اللي اتعلمناها لحد دلوقتي – من غير دوال.",
      "code": "print(\"Welcome to the Person Info Calculator!\\n\")\n\nname = input(\"Enter your name: \")\nbirth_year = int(input(\"Enter your birth year: \"))\n\ncurrent_year = 2024\nage = current_year - birth_year\nname_length = len(name)\n\nprint(\"\\n\" + \"=\"*30)\nprint(\"YOUR INFORMATION\")\nprint(\"=\"*30)\nprint(\"Name:\", name)\nprint(\"Age:\", age)\nprint(\"Name length:\", name_length, \"characters\")",
      "output": "Welcome to the Person Info Calculator!\n\nEnter your name: Ahmed\nEnter your birth year: 2000\n\n==============================\nYOUR INFORMATION\n==============================\nName: Ahmed\nAge: 24\nName length: 5 characters",
      "notes": "🎉 مفاهيم استخدمناها:\n✓ المتغيرات\n✓ أنواع البيانات\n✓ print()\n✓ input()\n✓ len()\n✓ \\n\n✓ العمليات الحسابية\n✓ تكرار الحروف في الطباعة",
      "question": {
        "text": "ما نوع البيانات التي تُخزن في المتغير \n\n name = input(\"Enter your name: \")\n ",
        "options": ["int", "string", "list", "bool"],
        "correct": "string",
        "explanation": "لأن قيمة name مأخوذة من input() وهي دايمًا نص (string)."
      }
    }
  ],
  "lec3": [
    {
      "title": "العمليات الحسابية في بايثون",
      "subtitle": "إزاي نستخدم الأرقام ونحسب بيها",
      "explanation": "العمليات الحسابية (Arithmetic Operators) بتسمحلك تنفذ حسابات على أرقام صحيحة أو عشرية. كل عملية لها رمز وسلوك معين، ولازم تلاحظ الفرق بين القسمة العادية والقسمة بدون باقي مع سلوك الأعداد السالبة.\n\nالرموز الأساسية:\n+  : جمع\n-  : طرح\n*  : ضرب\n/  : قسمة (always returns float)\n// : قسمة بدون كسور (floor division) — بترجع أقرب عدد صحيح أقل من أو يساوي الناتج (تأخذ الاتجاه نحو -∞ مع السالبة)\n%  : باقي القسمة (modulus)\n** : القوة (exponent)\n\nنقاط مهمة:\n- `/` دايمًا بيرجع float حتى لو الأعداد كانت صحيحة.\n- `//` مع أعداد سالبة بيعمل floor (مثال: -10 // 3 = -4).\n- `%` بيحافظ على العلاقة: (a // b) * b + (a % b) == a.\n- `**` أعلى أسبقية من الضرب، وهو right-associative (شوف الأمثلة).",
      "code": "\na = 10\nb = 3\n\nprint(a + b)   # جمع => 13\nprint(a - b)   # طرح => 7\nprint(a * b)   # ضرب => 30\nprint(a / b)   # قسمة عادية => 3.3333333333333335 (float)\nprint(a // b)  # قسمة بدون كسور => 3\nprint(a % b)   # باقي القسمة => 1\nprint(a ** b)  # 10 أس 3 => 1000\n\n# أمثلة تبين سلوك القسمة والباقي مع أعداد سالبة\nc = -10\nd = 3\nprint(c // d)  # -10 // 3 => -4 (floor towards -inf)\nprint(c % d)   # -10 % 3 => 2  (لأن -4*3 + 2 = -10)\n",
      "output": "\n13\n7\n30\n3.3333333333333335\n3\n1\n1000\n-4\n2\n",
      "notes": "\n- القسمة `/` دايمًا بتدي ناتج عشري (float).\n- `//` بيقدِّم قسمة 'floor' مش تقريب؛ فـ -5 // 2 = -3 مش -2.\n- `%` مفيد لمعرفة الباقي، والتحقق من فردية/زوجية الرقم: `if x % 2 == 0:` -> زوجي.\n- انتبه لنتائج الـ `**` لأنها ممكن تكبر قوي لو الأس كبير (استهلاك ذاكرة/وقت).\n",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة 2 ** 3 في بايثون؟",
        "options": ["6", "8", "9", "5"],
        "correct": "8",
        "explanation": "لأن 2 ** 3 معناها 2 مرفوع للقوة 3 = 2 × 2 × 2 = 8."
      }
    },
    {
      "title": "عمليات الإسناد",
      "subtitle": "إزاي ندي قيمة لمتغير ونتحكم فيها",
      "explanation": "عمليات الإسناد بتخزن قيمة في متغير. أبسطها `=`، وفيه أشكال مختصرة بتعمل العملية وتخزن النتيجة في نفس المتغير (augmented assignment). دي مفيدة لتقصير الكود وللتعبير بوضوح عن التغير في المتغير.\n\nأمثلة على operators المركبة: `=+`, `=-`, `=*`, `=/`, `=//`, `=%`, `=**`.\nملاحظة: `x /= y` دايمًا هيحوّل الناتج لـ float إذا ماكانش بالفعل float.",
      "code": "\nx = 10\nprint(x)   # 10\nx += 5     # نفس x = x + 5 => 15\nprint(x)   # 15\nx -= 3     # نفس x = x - 3 => 12\nprint(x)   # 12\nx *= 2     # نفس x = x * 2 => 24\nprint(x)   # 24\nx /= 4     # نفس x = x / 4 => 6.0 (float)\nprint(x)   # 6.0\n\n# المزايا: تقدر تستخدمها مع السلاسل والقوائم أيضاً\ns = \"Hello\"\ns += \" World\"   # concat => \"Hello World\"\nprint(s)\n",
      "output": "\n10\n15\n12\n24\n6.0\nHello World\n",
      "notes": "\n- العلامات المركبة بتخلي الكود أبسط وأسهل للقراءة.\n- تقدر تستخدمها مع النصوص والقوائم (مثال: list += [1,2]).\n- القسمة بالـ `/=` بتحول الناتج لـ float دائمًا.\n- خليك حذرًا مع القيم غير المتوافقة (مثلا محاولة `+=` بين عدد ونص هتسبب خطأ).",
      "question": {
        "type": "multiple",
        "text": "ما قيمة x بعد تنفيذ الكود التالي؟\n\nx = 4\nx *= 3",
        "options": ["7", "12", "1.33", "3"],
        "correct": "12",
        "explanation": "لأن x *= 3 معناها x = x * 3 => 4 × 3 = 12."
      }
    },
    {
      "title": "عمليات المقارنة",
      "subtitle": "إزاي نقارن بين القيم",
      "explanation": "عمليات المقارنة بترد قيم منطقية (`True` أو `False`). بنستخدمها في الشروط (`if`، `while`) أو لتحديد سلوك البرنامج بناءً على القيم.\n\nالرّموز الشائعة:\n==  : يساوي\n!=  : لا يساوي\n>   : أكبر من\n<   : أصغر من\n>=  : أكبر أو يساوي\n<=  : أصغر أو يساوي\n\nنقاط مهمة:\n- `==` يقارن القيم، مش الهوية. استخدام `is` بيقارن الهوية (هل المتغيران يشيران لنفس الكائن في الذاكرة؟).\n- تقدر تعمل chaining: `1 < x <= 10` — ده مفيد وصحيح في بايثون.\n- للموجودية في حاويات نستخدم `in`، مثلاً: `if 'a' in 'cat':`.",
      "code": "\na = 5\nb = 3\n\nprint(a == b)   # False\nprint(a != b)   # True\nprint(a > b)    # True\nprint(a < b)    # False\nprint(a >= 5)   # True\nprint(b <= 3)   # True\n\n# مثال على 'is' و 'in'\nlist1 = [1,2,3]\nlist2 = list1\nprint(list1 is list2)   # True لأنهم نفس الكائن\nprint(2 in list1)       # True\n",
      "output": "\nFalse\nTrue\nTrue\nFalse\nTrue\nTrue\nTrue\nTrue\n",
      "notes": "\n- `==` مقارنة للقيمة، `is` مقارنة للهوية.\n- المقارنات مفيدة داخل الشروط والتكرارات.\n- كن حذرًا عند مقارنة هياكل بيانات كبيرة أو حساسة للهوية (مثل الـ objects).",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة `7 != 7`؟",
        "options": ["True", "False", "7", "None"],
        "correct": "False",
        "explanation": "لأن 7 تساوي 7، فـ `!=` (لا تساوي) هتكون False."
      }
    },
    {
      "title": "ترتيب العمليات الحسابية",
      "subtitle": "إيه اللي بيتحسب الأول؟",
      "explanation": "لما تكتب تعبير فيه أكتر من عملية، بايثون بتنفيذ العمليات حسب قواعد الأولوية (precendence) زي الرياضيات. لو عايز تغير الترتيب استخدم الأقواس `()` بوضوح.\n\nالأسبقيات الرئيسية (من الأعلى للأقل):\n1. () الأقواس\n2. ** الأس (exponent) — ودي right-associative (يعني 2 ** 3 ** 2 = 2 ** (3 ** 2))\n3. unary + و - (زي +x, -x)\n4. * و / و // و % (الضرب والقسمة والقسمة بدون كسور والباقي)\n5. + و - (الجمع والطرح)\n\nاستخدم الأقواس لو شككت في ترتيب التنفيذ.",
      "code": "\nresult = 2 + 3 * 4      # 3 * 4 = 12 + 2 = 14\nprint(result)\n\nresult = (2 + 3) * 4    # (2+3)=5 * 4 = 20\nprint(result)\n\n# توضيح لخاصية الأس right-associative\nprint(2 ** 3 ** 2)      # = 2 ** (3 ** 2) = 2 ** 9 = 512\n",
      "output": "\n14\n20\n512\n",
      "notes": "\n- دايمًا استخدم الأقواس لو مش واضح أو لو عايز نتيجة مختلفة عن ترتيب الافتراضي.\n- الانتباه لخاصية الأس مهمة لأنها ممكن تعطي نتائج كبيرة جداً.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة `2 + 5 * 2`؟",
        "options": ["14", "20", "12", "10"],
        "correct": "12",
        "explanation": "لأن الضرب بيتنفذ الأول: 5 * 2 = 10 ثم + 2 = 12."
      }
    },
    {
      "title": "تحويل نوع البيانات",
      "subtitle": "إزاي نحول بين الأنواع المختلفة",
      "explanation": "في بايثون بنحتاج نحول القيم لأنواع مختلفة: من نص لرقم، من عدد صحيح لعشري، أو لنص علشان نطبعه.\nالدوال الشائعة للتحويل:\n- `int()`  : تحويل لـ عدد صحيح (يقطع الكسور، يقرب نحو الصفر)\n- `float()`: تحويل لـ عدد عشري\n- `str()`  : تحويل لنص\n- `bool()` : تحويل لقيمة منطقية (`False` للقيم الفارغة مثل 0، \"\"، []، None)\n\nنقطة مهمة: تحويل نص غير رقمي لـ int أو float بيرمي `ValueError` — استخدم try/except أو تحقق من النص قبل التحويل.",
      "code": "\nx = \"5\"\ny = int(x)    # تحويل النص \"5\" لعدد صحيح\nprint(y + 2)   # 5 + 2 = 7\n\nz = str(10)    # تحويل الرقم لنص\nprint(z + \"0\")  # \"10\" + \"0\" => \"100\"\n\n# تحويل نص عشري\ns = \"3.14\"\nf = float(s)\nprint(f + 0.86)  # 3.14 + 0.86 = 4.0\n\n# محاولة تحويل غير صالحة يجب التعامل معها\ntry:\n    bad = int(\"hello\")\nexcept ValueError:\n    print(\"خطأ: لا يمكن تحويل 'hello' إلى int\")\n\n# تحويل عدد سالب عشري إلى int يقطع الكسور نحو الصفر\nprint(int(-3.7))  # => -3\n",
      "output": "\n7\n100\n4.0\nخطأ: لا يمكن تحويل 'hello' إلى int\n-3\n",
      "notes": "\n- لازم تتأكد إن النص ممكن يتحول لرقم (مثال: \"5\" أو \"3.14\").\n- `int()` على نص عشري مثل \"3.14\" يدي خطأ — لازم تحول الأول لـ float ثم لـ int لو محتاج.\n- `bool(0)` => False، `bool(\"\")` => False، `bool(\"0\")` => True لأن النص غير فارغ.\n",
      "question": {
        "type": "multiple",
        "text": "ما ناتج الكود؟\n\nx = \"7\"\nprint(int(x) + 3)",
        "options": ["10", "73", "خطأ", "7"],
        "correct": "10",
        "explanation": "\"7\" اتحولت لـ int = 7 + 3 = 10"
      }
    },
    {
      "title": "استخدام f-string",
      "subtitle": "طريقة ذكية لكتابة النصوص مع المتغيرات",
      "explanation": "f-strings طريقة حديثة وسهلة لدمج المتغيرات داخل النص. بتبدأ بـ حرف `f` قبل النص، والعبارات اللي جوه `{}` بتتقرَّأ وتُستبدل بالقيمة في وقت التنفيذ.\n\nمزايا:\n- أوضح واقصر من concatenation.\n- تقدر تحط تعابير مباشرة داخل `{}`، وتستخدم تنسيقات مثل `.2f` للأرقام.\n- متاحة من Python 3.6 فصاعدًا.",
      "code": "\nname = \"Ali\"\nage = 20\n\nprint(f\"اسمي {name} وسني {age} سنة\")\nprint(f\"2 + 3 = {2 + 3}\")\npi = 3.14159\nprint(f\"Pi تقريباً {pi:.2f}\")   # تنسيق لعرض رقم بعشرتين بعد الفاصلة\n",
      "output": "\nاسمي Ali وسني 20 سنة\n2 + 3 = 5\nPi تقريباً 3.14\n",
      "notes": "\n- تقدر تعمل تعابير داخل الأقواس: `f\"{x * 2}\"` أو `f\"{func(5)}\"`.\n- للتنسيق استخدم الصيغة `:{format_spec}`، مثال: `{value:.2f}`.\n- لو عايز تستخدم قوسين معقوفين حرفيًا اكتب `{{` أو `}}` داخل النص.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود؟\n\nx = 5\ny = 10\nprint(f\"{x} + {y} = {x + y}\")",
        "options": ["5 + 10 = 15", "x + y = 15", "15", "خطأ"],
        "correct": "5 + 10 = 15",
        "explanation": "f-string بيطبع القيم: x = 5 و y = 10 => 5 + 10 = 15"
      }
    },
    {
      "title": "أداة العمليات الحسابية المصغّرة",
      "subtitle": "برنامج يجري كل العمليات الحسابية على رقمين",
      "explanation": "الأداة تاخد رقمين من المستخدم وتطبع ناتج العمليات الأساسية. مهم تتحقق من صحة المدخلات وتتجنب القسمة على صفر.\n\nالنقاط التحسينية في النسخة دي:\n- التعامل مع الأخطاء (غير رقم أو قسمة على صفر)\n- استخدام `float()` لتحويل المدخلات لقبول الأعداد العشرية\n- تنسيق النتائج باستخدام f-strings",
      "code": "print(\"Welcome to the Mini Math Tool!\")\n\ntry:\n    num1 = float(input(\"Enter the first number: \"))\n    num2 = float(input(\"Enter the second number: \"))\nexcept ValueError:\n    print(\"خطأ: من فضلك ادخل أرقام صحيحة.\")\nelse:\n    print(f\"\\nAddition: {num1} + {num2} = {num1 + num2}\")\n    print(f\"Subtraction: {num1} - {num2} = {num1 - num2}\")\n    print(f\"Multiplication: {num1} * {num2} = {num1 * num2}\")\n\n    if num2 == 0:\n        print(\"Division: undefined (division by zero)\")\n        print(\"Floor Division: undefined (division by zero)\")\n        print(\"Remainder: undefined (division by zero)\")\n    else:\n        print(f\"Division: {num1} / {num2} = {num1 / num2}\")\n        print(f\"Floor Division: {num1} // {num2} = {num1 // num2}\")\n        print(f\"Remainder: {num1} % {num2} = {num1 % num2}\")\n\n    # احذر من رفع رقم لقوة كبيرة لأنها ممكن تستهلك ذاكرة/وقت كبير\n    try:\n        print(f\"Power: {num1} ** {num2} = {num1 ** num2}\")\n    except OverflowError:\n        print(\"Power: الناتج كبير جداً (Overflow)\")\n",
      "output": "Welcome to the Mini Math Tool!\nEnter the first number: 10\nEnter the second number: 5\n\nAddition: 10.0 + 5.0 = 15.0\nSubtraction: 10.0 - 5.0 = 5.0\nMultiplication: 10.0 * 5.0 = 50.0\nDivision: 10.0 / 5.0 = 2.0\nFloor Division: 10.0 // 5.0 = 2.0\nRemainder: 10.0 % 5.0 = 0.0\nPower: 10.0 ** 5.0 = 100000.0",
      "notes": "- استخدمنا `float()` لتحويل إدخال المستخدم لأرقام عشرية.\n- تحقّقنا من القسمة على صفر لتجنب `ZeroDivisionError`.\n- حذرنا من عمليات `**` الكبيرة لأنها ممكن تسبب بطء أو overflow.\n- ممكن نطوّر الأداة لاحقًا لتدعم عمليات متتالية أو قائمة بالأرقام.",
      "question": {
        "text": "ما نتيجة العملية التالية عند إدخال الرقمين 7 و 2؟\n\nprint(f\"Power: {num1} ** {num2} = {num1 ** num2}\")",
        "options": ["14", "49", "128", "7"],
        "correct": "49",
        "explanation": "لأن num1 = 7 و num2 = 2، فـ num1 ** num2 = 7 ** 2 = 49."
      }
    }
  ],
  "lec4": [
    {
      "title": "مقدمة عن if statement",
      "subtitle": "إزاي نتحكم في مسار الكود بناءً على شرط",
      "explanation": "\nجملة if بتخليك تاخد قرارات داخل البرنامج.\nيعني لو شرط معين اتحقق، ينفذ كود، ولو الشرط ما تحققش، يتجاهله.\n\nالصيغة العامة:\n```\nif شرط:\n    كود يتنفذ لو الشرط True\n```\n\nمثال بسيط:",
      "code": "x = 5\nif x > 3:\n    print(\"x is greater than 3\")",
      "output": "\nx is greater than 3\n",
      "notes": "\n- الشرط بيتكتب بعد if ولازم ينتهي بنقطتين `:`.\n- لازم نكتب الكود اللي بعد if بمسافة بادئة (Indentation).\n",
      "question": {
        "type": "multiple",
        "text": "ماذا يحدث إذا كان الشرط False؟",
        "options": ["ينفذ الكود", "يُطبع خطأ", "يتجاهل الكود", "يكرر نفسه"],
        "correct": "يتجاهل الكود",
        "explanation": "لو الشرط False، بايثون بيتخطى الكود اللي تحت if."
      }
    },
    {
      "title": "elif و else",
      "subtitle": "التفرع بين عدة حالات",
      "explanation": "\nتقدر تستخدم `elif` لما يكون عندك أكتر من شرط.\nوتستخدم `else` لو كل الشروط فشلت.\n\nالصيغة:\n```\nif شرط1:\n    كود1\nelif شرط2:\n    كود2\nelse:\n    كود افتراضي\n```",
      "code": "x = 10\nif x < 5:\n    print(\"Less than 5\")\nelif x == 10:\n    print(\"Equal to 10\")\nelse:\n    print(\"Greater than 5 but not 10\")",
      "output": "Equal to 10\n",
      "notes": "\n- ممكن تضيف عدد غير محدود من (elif).\n  -  (else) بتتنفذ فقط لو كل الشروط قبلها False.",
      "question": {
        "type": "multiple",
        "text": "كم مرة يمكن استخدام elif؟",
        "options": ["مرة واحدة", "مرتين", "عدد غير محدود", "ماينفعش نستخدمها"],
        "correct": "عدد غير محدود",
        "explanation": "تقدر تستخدم elif قد ما تحب، حسب الحاجة."
      }
    },
    {
      "title": "المقارنات في الشرط",
      "subtitle": "علامات المقارنة اللي بنستخدمها في if",
      "explanation": "\nالشرط في if لازم يرجع قيمة Boolean (صح أو خطأ).\nأشهر رموز المقارنة:\n\n- `==` : يساوي\n- `!=` : لا يساوي\n- `>`  : أكبر من\n- `<`  : أصغر من\n- `>=` : أكبر من أو يساوي\n- `<=` : أصغر من أو يساوي",
      "code": "x = 8\nif x != 5:\n    print(\"x is not equal to 5\")",
      "output": "x is not equal to 5\n",
      "notes": "\n- خد بالك ما تخلطش بين = (إسناد) و == (مقارنة).\n",
      "question": {
        "type": "multiple",
        "text": "أي من التالي صحيح؟\nلو x = 4، فإن x == 4 تكون:",
        "options": ["False", "Error", "True", "None"],
        "correct": "True",
        "explanation": "لأن x فعلاً تساوي 4، فالمقارنة بترجع True."
      }
    },
    {
      "title": "استخدام and و or",
      "subtitle": "شروط مركبة داخل if",
      "explanation": "\nتقدر تجمع أكتر من شرط باستخدام:\n- `and`: لازم الشرطين يكونوا True\n- `or`: يكفي واحد منهم يكون True\n\nمثال:",
      "code": "x = 7\ny = 3\nif x > 5 and y < 5:\n    print(\"Both conditions are True\")",
      "output": "Both conditions are True\n",
      "notes": "\n- استخدم () لو الشرط معقد عشان توضح الترتيب.\n- `not` كمان ممكن تعكس القيمة: `not True` = False.",
      "question": {
        "type": "multiple",
        "text": "متى تكون الجملة التالية True؟\n`(x > 5 or x == 5)`",
        "options": [
          "إذا x أقل من 5",
          "إذا x أكبر من أو يساوي 5",
          "دايمًا False",
          "مستحيل تتنفذ"
        ],
        "correct": "إذا x أكبر من أو يساوي 5",
        "explanation": "`or` معناها واحد من الشرطين يكفي يكون True."
      }
    },
    {
      "title": "القيم Truthy و Falsy في if",
      "subtitle": "إزاي بايثون بتفهم الشرط لوحده حتى بدون مقارنة",
      "explanation": "\nفي بايثون، مش لازم تكتب شرط بشكل صريح زي `x > 0`.\nأي قيمة تقدر تتقيم في if كـ True أو False.\n\n## القيم اللي تعتبر False (Falsy):\n- `None`\n- `False`\n- `0`, `0.0`\n- `''` (سلسلة فارغة)\n- `[]`, `{}`, `()` (قوائم ومجموعات فاضية)\n\nكل القيم التانية تعتبر True (Truthy).",
      "code": "name = \"\"\nif name:\n    print(\"Hello\")\nelse:\n    print(\"Name is empty\")",
      "output": "Name is empty\n",
      "notes": "\n- ده مفيد لما تتحقق من وجود بيانات.\nمثال: `if items:` لو فيها عناصر، يتنفذ الشرط.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود التالي؟\nx = []\nif x:\n    print(\"فيه عناصر\")\nelse:\n    print(\"فاضي\")",
        "options": ["فيه عناصر", "فاضي", "Error", "مافيش مخرجات"],
        "correct": "فاضي",
        "explanation": "لأن القائمة فاضية، وده يعتبر Falsy."
      }
    },
    {
      "title": "استخدام if مع input",
      "subtitle": "نتفاعل مع المستخدم ونتحقق من إدخاله",
      "explanation": "\nممكن نطلب من المستخدم إدخال بيانات، ونفحصها باستخدام if.\ninput بيرجع نص، فلو هنقارن أرقام لازم نحول بـ int().",
      "code": "name = input(\"Enter your name: \")\nif name == \"Ahmed\":\n    print(\"Hello Ahmed!\")\nelse:\n    print(\"Welcome!\")",
      "output": "(depends on user input)\n",
      "notes": "\n- input دايمًا بيرجع نص (string)، حتى لو كتب رقم.\n- استخدم int(input(...)) لو محتاج رقم.",
      "question": {
        "type": "multiple",
        "text": "ما نوع القيمة الراجعة من input()؟",
        "options": ["int", "bool", "str", "float"],
        "correct": "str",
        "explanation": "input بيرجع نص، فلازم تحوّله لو عاوز رقم."
      }
    },
    {
      "title": "if متداخلة (Nested if)",
      "subtitle": "إزاي نحط شرط داخل شرط",
      "explanation": "\nتقدر تحط if جوه if، وده بنسميه if متداخلة.\nمفيد لما يكون القرار التاني معتمد على الشرط الأول.",
      "code": "x = 10\nif x > 5:\n    if x < 20:\n        print(\"x is between 5 and 20\")",
      "output": "x is between 5 and 20\n",
      "notes": "\n- كل if داخلية لازم يكون ليها Indentation زيادة.\n- حاول ما تكثرش التداخل عشان الكود مايبقاش معقد.",
      "question": {
        "type": "multiple",
        "text": "هل هذا الكود صحيح؟\nif x > 0:\nprint(\"نعم\")",
        "options": ["نعم", "لا، بسبب التنسيق", "لا، شرط خطأ", "يحتاج else"],
        "correct": "لا، بسبب التنسيق",
        "explanation": "لازم يكون فيه مسافة بادئة تحت if (indentation)."
      }
    },
    {
      "title": "التعبير الشرطي المختصر",
      "subtitle": "لو عاوز تكتب شرط بسيط في سطر واحد",
      "explanation": "\nالتعبير الشرطي المختصر اسمه (Ternary Operator)\nوبيكون بصيغة:\n\n code1 if (condition) else code2 \n\nمفيد لو عندك شرط بسيط وعاوز تختصر الكود.",
      "code": "age = 16\nstatus = \"Adult\" if age >= 18 else \"Minor\"\nprint(status)",
      "output": "Minor\n",
      "notes": "\n- استخدمه للحالات البسيطة.\n- مابنصحش تستخدمه مع شروط معقدة.",
      "question": {
        "type": "multiple",
        "text": "ما نتيجة الكود التالي؟\nx = 5\nmsg = \"كبير\" if x > 10 else \"صغير\"\nprint(msg)",
        "options": ["كبير", "صغير", "خطأ", "مافيش مخرجات"],
        "correct": "صغير",
        "explanation": "x مش أكبر من 10، فبتتنفذ القيمة بعد else."
      }
    },
    {
      "title": "أهم دوال النصوص (string methods)",
      "subtitle": "أدوات التعامل مع النصوص في بايثون",
      "explanation": "\nسلاسل النص (strings) في بايثون معاها أدوات جاهزة (methods) تساعدنا نعدل، نحلل، ونفحص النص بسهولة.\nفي السلايد دي هنتعرف على أهم وأشهر الدوال اللي لازم تكون عارفها.",

      "code": "# 1. lower() و upper()\nname = \"AhMeD\"\nprint(name.lower())   # ahmed\nprint(name.upper())   # AHMED\n\n# 2. strip() و lstrip() و rstrip()\ntxt = \"   Hello   \"\nprint(txt.strip())    # Hello\nprint(txt.lstrip())   # Hello   \nprint(txt.rstrip())   #    Hello\n\n# 3. replace(old, new)\nmsg = \"hello world\"\nprint(msg.replace(\"world\", \"Python\"))   # hello Python\n\n# 4. split(separator)\ntext = \"learn python now\"\nwords = text.split()\nprint(words)          # ['learn', 'python', 'now']\n\n# 5. startswith() و endswith()\nfile = \"report.pdf\"\nprint(file.startswith(\"rep\"))    # True\nprint(file.endswith(\".pdf\"))     # True\n\n# 6. find(substring)\nsentence = \"I love Python\"\nprint(sentence.find(\"Python\"))   # 7 (مكان بداية الكلمة)\nprint(sentence.find(\"Java\"))     # -1 (مش موجود)\n\n# 7. count(substring)\ns = \"banana\"\nprint(s.count(\"a\"))              # 3\n\n# 8. isdigit(), isalpha(), isalnum()\nprint(\"123\".isdigit())           # True\nprint(\"abc\".isalpha())           # True\nprint(\"abc123\".isalnum())        # True\n\n# 9. join(list)\nwords = [\"learn\", \"python\"]\nprint(\" \".join(words))           # learn python",

      "output": "ahmed\nAHMED\nHello\nHello   \n   Hello\nhello Python\n['learn', 'python', 'now']\nTrue\nTrue\n7\n-1\n3\nTrue\nTrue\nTrue\nlearn python\n",

      "notes": "\n- كل الدوال دي بتشتغل على النصوص فقط.\n- معظمها ما بيعدّلاش النص الأصلي، بترجع نسخة جديدة.\n- مفيدة جدًا في التنظيف (cleaning) وتحليل البيانات (text processing).",

      "question": {
        "type": "multiple",
        "text": "أي من التالي يرجع قائمة (list)؟",
        "options": ["upper()", "replace()", "split()", "strip()"],
        "correct": "split()",
        "explanation": "الدالة split() بتقسّم النص لقائمة كلمات أو أجزاء."
      }
    }
  ]
}
