{
  "lec5": [
    {
      "title": "الفرق بين Module و Library و Framework",
      "subtitle": "فهم أدوات تنظيم الكود في بايثون",
      "explanation": "في البرمجة، بنستخدم أدوات بتساعدنا نكتب كود منظم ونعيد استخدامه. الفرق بينهم كالتالي:\n\n1. **Module (وحدة):** ملف فيه كود بايثون (متغيرات، دوال، كائنات...) ممكن تستخدمه في ملفات تانية.\n2. **Library (مكتبة):** مجموعة من الـ modules الجاهزة لحل مشاكل معينة  .\n3. **Framework (إطار عمل):** نظام كامل جاهز ببنية محددة، بيساعدك تبني مشروع كبير، زي Flask أو Django. بيحط قواعد تمشي عليها أثناء الكتابة.\n\nالفرق الأساسي:\n- **Module:** جزء صغير (ملف واحد).\n- **Library:** تجميعة أدوات تساعدك، وانت اللي تتحكم فيها.\n- **Framework:** انت بتشتغل جوا نظام هو اللي بيحدد ازاي تشتغل.",
      "code": "\n# مثال على module\nimport math\nprint(math.sqrt(16))\n\n# مثال على مكتبة\nimport random\nprint(random.randint(1, 10))\n\n# إطار عمل (مثال فقط، لا يعمل بدون إعداد كامل)\n# from flask import Flask\n# app = Flask(__name__)\n",
      "output": "\n4.0\nرقم عشوائي بين 1 و 10 (يتغير كل مرة)",
      "notes": "- الـ module ممكن تكتبه بنفسك، إنما المكتبة بتكون جاهزة.\n- framework بيكون فيه قواعد أكثر إلزامًا.\n- ممكن تستخدم module جوا مكتبة، أو مكتبة جوا Framework.",
      "question": {
        "text": "ما الفرق بين المكتبة والإطار Framework؟",
        "options": [
          "المكتبة تفرض عليك طريقة معينة للكتابة، والإطار لا",
          "الإطار مجموعة Modules فقط",
          "المكتبة أدوات تستخدمها بحرية، الإطار يحدد طريقة عملك",
          "لا يوجد فرق"
        ],
        "correct": "المكتبة أدوات تستخدمها بحرية، الإطار يحدد طريقة عملك",
        "explanation": "المكتبة بتساعدك لكن متتحكمش فيك، أما الإطار بيمشيك على قواعد معينة للبناء."
      }
    },
    {
      "title": "مكتبة random في بايثون",
      "subtitle": "توليد القيم العشوائية",
      "explanation": "مكتبة `random` بتسمحلك تعمل حاجات عشوائية زي اختيار رقم أو عنصر من قائمة.\nدي بعض الدوال المهمة فيها:\n\n- `random.random()`: بيولد رقم عشري بين 0 و 1.\n- `random.randint(a, b)`: بيولد رقم صحيح بين a و b.\n- `random.choice(list)`: بيختار عنصر عشوائي من قائمة.\n- `random.shuffle(list)`: بيقلب ترتيب العناصر في القائمة.",
      "code": "\nimport random\n\nprint(random.random())          # رقم عشري بين 0 و 1\nprint(random.randint(1, 100))   # رقم صحيح بين 1 و 100\n\ncolors = [\"red\", \"blue\", \"green\"]\nprint(random.choice(colors))   # لون عشوائي من القائمة\n\nrandom.shuffle(colors)\nprint(colors)                  # ترتيب جديد للقائمة",
      "output": "\n0.6383...\n42\nblue\n['green', 'red', 'blue']",
      "notes": "- لازم تعمل import الأول.\n- الأرقام بتتغير كل مرة.\n- تقدر تستخدمها في الألعاب أو المحاكاة.",
      "question": {
        "text": "ما فائدة الدالة random.randint(1, 5)؟",
        "options": [
          "تولد رقم عشري بين 1 و 5",
          "تولد رقم صحيح بين 1 و 5",
          "تختار عنصر من قائمة",
          "تكرر الرقم 5 مرات"
        ],
        "correct": "تولد رقم صحيح بين 1 و 5",
        "explanation": "الدالة randint بتولد أرقام صحيحة بين الرقمين المحددين، وبتشملهم."
      }
    },

    {
      "title": "القائمة (List) في بايثون",
      "subtitle": "تجميع عناصر متعددة في متغير واحد",
      "explanation": "القائمة هي نوع بيانات بيجمع أكتر من عنصر في متغير واحد. ممكن تحتوي أرقام، نصوص، أو حتى قوائم تانية.\n\n- بتنكتب بين [ ]\n- العناصر مفصولة بفواصل.\n- ممكن توصل لأي عنصر باستخدام رقم الفهرس (index).",
      "code": "\nmy_list = [10, 20, 30, 40]\nprint(my_list[0])    # أول عنصر\nprint(my_list[-1])   # آخر عنصر\n\nmixed = [1, \"hi\", True]\nprint(mixed)",
      "output": "\n10\n40\n[1, 'hi', True]",
      "notes": "- الفهرسة بتبدأ من 0.\n- ممكن تضيف أو تحذف عناصر.\n- القائمة ممكن تكون فاضية [].",
      "question": {
        "text": "ما نتيجة تنفيذ الكود التالي؟\n\nx = [1, 2, 3]\nprint(x[1])",
        "options": ["1", "2", "3", "خطأ"],
        "correct": "2",
        "explanation": "الفهرس 1 معناه العنصر الثاني، وهو 2."
      }
    },
    {
      "title": "العمليات على القوائم",
      "subtitle": "طرق تعديل واستكشاف القوائم",
      "explanation": "تقدر تعمل عمليات كثيرة على القوائم، زي:\n\n- `append(item)`: تضيف عنصر في الآخر.\n- `insert(index, item)`: تضيف عنصر في مكان معين.\n- `remove(item)`: تحذف أول ظهور للعنصر.\n- `pop(index)`: تحذف عنصر وتسترجعه.\n- `len(list)`: تطول القائمة.\n- `in`: للتحقق من وجود عنصر.",
      "code": "\nfruits = [\"apple\", \"banana\"]\nfruits.append(\"orange\")\nprint(fruits)\n\nfruits.remove(\"banana\")\nprint(fruits)\n\nprint(\"apple\" in fruits)   # هل موجود؟\nprint(len(fruits))         # عدد العناصر",
      "output": "\n['apple', 'banana', 'orange']\n['apple', 'orange']\nTrue\n2",
      "notes": "- `append` دايمًا تضيف في الآخر.\n- `remove` تحذف أول عنصر مطابق فقط.\n- `in` بيرجع True أو False.",
      "question": {
        "text": "ما نتيجة الكود التالي؟\n\nnums = [1, 2, 3]\nnums.append(4)\nprint(len(nums))",
        "options": ["3", "4", "خطأ", "0"],
        "correct": "4",
        "explanation": "أضفنا عنصر جديد فبقى طول القائمة 4."
      }
    },
    {
      "title": "مقارنة العضوية والهوية في بايثون",
      "subtitle": "فهم in و not in و is و is not و ==",
      "explanation": "بايثون بتوفر أدوات مختلفة علشان تفحص وجود أو تطابق العناصر. لازم نفرّق بينهم:\n\n1. `in`: يتحقق إذا كان العنصر موجود داخل تجميعة.\n2. `not in`: يتحقق إذا كان العنصر غير موجود داخل تجميعة.\n3. `==`: يتحقق من تساوي القيم (value equality).\n4. `is`: يتحقق من الهوية (هل المتغيرين بيشيروا لنفس الكائن في الذاكرة).\n5. `is not`: عكس `is`.\n\n⚠️ مهم تفرق بين `==` و `is`: الأولى بتقارن القيم، التانية بتقارن الهوية.",
      "code": "# in / not in with list\nfruits = [\"apple\", \"banana\"]\nprint(\"apple\" in fruits)     # True\nprint(\"grape\" not in fruits) # True\n\n# == vs is\nx = [1, 2, 3]\ny = [1, 2, 3]\nz = x\n\nprint(x == y)   # True (نفس القيمة)\nprint(x is y)   # False (كائنين مختلفين)\nprint(x is z)   # True (نفس الكائن)\n\n# is / is not with None\na = None\nprint(a is None)     # True\nprint(a is not None) # False",
      "output": "True\nTrue\nTrue\nFalse\nTrue\nTrue\nFalse",
      "notes": "- `in` و `not in` بتشتغل مع list, string, tuple, dict (بس المفاتيح).\n- `==` بيقارن المحتوى.\n- `is` بيقارن الهوية (نفس المكان في الذاكرة).\n- استخدام `is None` أفضل من `== None` عند مقارنة بـ None.\n- غالبًا `is` و `is not` بتستخدم مع `None`, `True`, `False`.",
      "question": {
        "text": "ما الفرق بين `==` و `is` في بايثون؟",
        "options": [
          "`==` تقارن القيم و `is` تقارن الهوية",
          "`==` تقارن النصوص فقط و `is` تستخدم مع الأرقام",
          "`is` تقارن القيم و `==` تقارن الأنواع",
          "لا يوجد فرق بينهما"
        ],
        "correct": "`==` تقارن القيم و `is` تقارن الهوية",
        "explanation": "`==` تستخدم للتحقق إذا كانت القيمتين متساويتين، بينما `is` تتحقق إذا كان المتغيران يشيران لنفس الكائن في الذاكرة."
      }
    },
    {
      "title": "مشروع لعبة ملك وكتابة",
      "subtitle": "تطبيق عشوائي باستخدام مكتبة random",
      "explanation": "لعبة بسيطة بيتحدى فيها المستخدم الحظ. المستخدم بيختار إما 'ملك' أو 'كتابة'، والبرنامج بيختار بشكل عشوائي باستخدام مكتبة `random`. بعدين بنقارن الاختيارين ونحدد هل المستخدم كسب ولا خسر.",
      "code": "import random\n\noptions = [\"heads\", \"tails\"]\n\nprint(\"🎮 Welcome to the Heads or Tails Game!\")\n\nuser_choice = input(\"Choose (heads / tails): \").strip().lower()\n\nif user_choice not in options:\n    print(\"❌ Invalid choice. Please choose 'heads' or 'tails'.\")\nelse:\n    computer_choice = random.choice(options)\n    print(f\"🪙 The computer flipped: {computer_choice}\")\n\n    if user_choice == computer_choice:\n        print(\"✅ You won! 🎉\")\n    else:\n        print(\"❌ You lost! Better luck next time 😊\")",
      "output": "🎮 Welcome to the Heads or Tails Game!\nChoose (heads / tails): heads\n🪙 The computer flipped: tails\n❌ You lost! Better luck next time 😊",
      "notes": "- استخدمنا مكتبة `random` لتوليد اختيار عشوائي.\n- استخدمنا `strip()` و `lower()` عشان نعالج الإدخال.\n- تأكدنا إن اختيار المستخدم صحيح قبل البدء.\n- ممكن نطوّرها بإضافة عداد نقاط أو إعادة اللعب تلقائيًا.",
      "question": {
        "text": "ما وظيفة السطر التالي في الكود؟\n\ncomputer_choice = random.choice(options)",
        "options": [
          "يطلب إدخال من المستخدم",
          "يطبع النتيجة",
          "يختار عشوائيًا بين 'ملك' و'كتابة'",
          "يضيف عنصر للقائمة"
        ],
        "correct": "يختار عشوائيًا بين 'ملك' و'كتابة'",
        "explanation": "الدالة `random.choice()` بتختار عنصر عشوائي من القائمة، وده هو اللي بيعمله السطر."
      }
    }
  ]
}
